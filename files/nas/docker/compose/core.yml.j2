{% include '_anchors.yml.j2' %}

services:
  socket-proxy:
    extends:
      file: common.yml
      service: common-keys-core
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    networks:
      - socket_proxy
    #  socket_proxy:
    #    ipv4_address: 192.168.91.254 # You can specify a static IP
    privileged: true
    #ports:
    # - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=0 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=0 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=0 # Portainer
      - VOLUMES=1 # Portainer

  traefik:
    extends:
      file: common.yml
      service: common-keys-core
    container_name: traefik
    image: traefik:3.3
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.transport.respondingTimeouts.readTimeout=600s
      - --entrypoints.websecure.transport.respondingTimeouts.idleTimeout=600s
      - --entrypoints.websecure.transport.respondingTimeouts.writeTimeout=600s
      - --entrypoints.traefik.address=:8080
      - --entrypoints.websecure.http3=true
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      # - --entrypoints.websecure.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --api=true
      - --api.dashboard=true
      - --api.insecure=false
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=docker_proxies
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.options=tls-opts@file
      # Add route53 as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.websecure.http.tls.certresolver=dns-route53
      - --entrypoints.websecure.http.tls.domains[0].main=$DOMAIN_NAME
      - --entrypoints.websecure.http.tls.domains[0].sans=*.$DOMAIN_NAME
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
      #- --certificatesResolvers.dns-route53.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-route53.acme.email=$EMAIL_ADDRESS
      - --certificatesResolvers.dns-route53.acme.storage=/acme.json
      - --certificatesResolvers.dns-route53.acme.dnsChallenge.provider=route53
      - --certificatesResolvers.dns-route53.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-route53.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      proxies:
        ipv4_address: 10.17.100.200
      socket_proxy:
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      # - target: 8080
      #  published: 8080
      #  protocol: tcp
      #  mode: host
    #secrets:
       #- htpasswd
    volumes:
      - $CONTAINER_APPDATA_DIR/traefik/rules:/rules # file provider directory
      - $CONTAINER_APPDATA_DIR/traefik/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $CONTAINER_APPDATA_DIR/traefik/logs:/logs # log directory for traefik and access logs
      - $CONTAINER_APPDATA_DIR/traefik/plugins-local:/plugins-local # traefik plugins
    environment:
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      AWS_REGION: $AWS_REGION
      AWS_HOSTED_ZONE_ID: $AWS_HOSTED_ZONE_ID
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=websecure"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAIN_NAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-route53"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAIN_NAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAIN_NAME,*.qbt.$DOMAIN_NAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-no-auth@file" # For No Authentication
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-auth-basic@file" # For Basic HTTP Authentication      
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file" # For Google OAuth
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file" # For Authelia Authentication

  oauth:
    extends:
      file: common.yml
      service: common-keys-core
    image: ghcr.io/jordemort/traefik-forward-auth:latest
    container_name: oauth
    environment:
      PROVIDERS_GOOGLE_CLIENT_ID: "{{ oauth_client_id }}"
      PROVIDERS_GOOGLE_CLIENT_SECRET: "{{ oauth_client_secret }}"
      SECRET: "{{ forward_auth_secret }}"
      COOKIE_DOMAIN: $DOMAIN_NAME
      AUTH_HOST: oauth.$DOMAIN_NAME
      LIFETIME: 86400 # 1 day
      INSECURE_COOKIE: "false"
      LOG_LEVEL: info
      WHITELIST: "{% for email in oauth_whitelist %}{{ email }},{% endfor %}{{ admin_email_address }}"
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.entrypoints=websecure"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAIN_NAME`)"
      # Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      # HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"
  
  ddns-route53:
    extends:
      file: common.yml
      service: common-keys-core
    image: crazymax/ddns-route53:latest
    container_name: ddns-route53
    environment:
      <<: *default-tz-puid-pgid
      SCHEDULE: "*/30 * * * *"
      LOG_LEVEL: info
      LOG_JSON: "false"
      DDNSR53_CREDENTIALS_ACCESSKEYID: $AWS_ACCESS_KEY_ID
      DDNSR53_CREDENTIALS_SECRETACCESSKEY: $AWS_SECRET_ACCESS_KEY
      DDNSR53_ROUTE53_HOSTEDZONEID: $AWS_HOSTED_ZONE_ID
      DDNSR53_ROUTE53_RECORDSSET_0_NAME: $DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_0_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_0_TTL: 300
{% for sub in sub_domains %}
      DDNSR53_ROUTE53_RECORDSSET_{{ loop.index }}_NAME: "{{ sub }}.$DOMAIN_NAME"
      DDNSR53_ROUTE53_RECORDSSET_{{ loop.index }}_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_{{ loop.index }}_TTL: 300
{% endfor %}

  {# # Traefik Whoami - a simple page to help debug headers and routing
  whoami:
    <<: *common-keys-apps
    image: "traefik/whoami"
    container_name: "whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami-login-rtr.entrypoints=https"
      - "traefik.http.routers.whoami-login-rtr.rule=Host(`whoami.$DOMAIN_NAME`)"
      - "traefik.http.routers.whoami-rtr.entrypoints=https"
      - "traefik.http.routers.whoami-rtr.rule=Host(`whoami.$DOMAIN_NAME`) && {{ allow_admin_rule }}"
      ## Middlewares
      - "traefik.http.routers.whoami-login-rtr.middlewares=chain-oauth@file,back-to-home@file"
      - "traefik.http.routers.whoami-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.whoami-rtr.service=whoami-svc"
      - "traefik.http.services.whoami-svc.loadbalancer.server.port=80" #}

  wireguard:
    security_opt:
      - no-new-privileges:true
    image: ghcr.io/linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - $CONTAINER_APPDATA_DIR/wireguard:/config
      - /lib/modules:/lib/modules
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    # Traefik routers must be connected to this service in order to route correctly
    networks:
      proxies:
        ipv4_address: 10.17.100.100
    labels:
      - "traefik.enable=true"

      ### Public QBittorent Routers
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.qbt-public-rtr-bypass.entrypoints=websecure"
      - "traefik.http.routers.qbt-public-rtr-bypass.rule=Host(`public.qbt.$DOMAIN_NAME`) && Header(`Traefik-Auth-Key`, `$TRAEFIK_AUTH_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.qbt-public-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.qbt-public-rtr.entrypoints=websecure"
      - "traefik.http.routers.qbt-public-rtr.rule=Host(`public.qbt.$DOMAIN_NAME`)"
      - "traefik.http.routers.qbt-public-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.qbt-public-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.qbt-public-rtr-bypass.service=qbt-public-svc"
      - "traefik.http.routers.qbt-public-rtr.service=qbt-public-svc"
      - "traefik.http.services.qbt-public-svc.loadbalancer.server.port=8080"

      ### Private QBittorent Routers
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.qbt-private-rtr-bypass.entrypoints=websecure"
      - "traefik.http.routers.qbt-private-rtr-bypass.rule=Host(`private.qbt.$DOMAIN_NAME`) && Header(`Traefik-Auth-Key`, `$TRAEFIK_AUTH_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.qbt-private-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.qbt-private-rtr.entrypoints=websecure"
      - "traefik.http.routers.qbt-private-rtr.rule=Host(`private.qbt.$DOMAIN_NAME`)"
      - "traefik.http.routers.qbt-private-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.qbt-private-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.qbt-private-rtr-bypass.service=qbt-private-svc"
      - "traefik.http.routers.qbt-private-rtr.service=qbt-private-svc"
      - "traefik.http.services.qbt-private-svc.loadbalancer.server.port=8081"

      ### Books QBittorent Routers
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.qbt-books-rtr-bypass.entrypoints=websecure"
      - "traefik.http.routers.qbt-books-rtr-bypass.rule=Host(`books.qbt.$DOMAIN_NAME`) && Header(`Traefik-Auth-Key`, `$TRAEFIK_AUTH_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.qbt-books-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.qbt-books-rtr.entrypoints=websecure"
      - "traefik.http.routers.qbt-books-rtr.rule=Host(`books.qbt.$DOMAIN_NAME`)"
      - "traefik.http.routers.qbt-books-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.qbt-books-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.qbt-books-rtr-bypass.service=qbt-books-svc"
      - "traefik.http.routers.qbt-books-rtr.service=qbt-books-svc"
      - "traefik.http.services.qbt-books-svc.loadbalancer.server.port=8082"

      ### TV Sonarr Routers
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=websecure"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAIN_NAME`) && Header(`Traefik-Auth-Key`, `$TRAEFIK_AUTH_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.sonarr-rtr.entrypoints=websecure"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAIN_NAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"

      ### Radarr Routers
      # HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=websecure"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$DOMAIN_NAME`) && Header(`Traefik-Auth-Key`, `$TRAEFIK_AUTH_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.radarr-rtr.entrypoints=websecure"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAIN_NAME`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"
      
      # ### Readarr Routers
      # # HTTP Routers Auth Bypass
      # - "traefik.http.routers.readarr-rtr-bypass.entrypoints=websecure"
      # - "traefik.http.routers.readarr-rtr-bypass.rule=Host(`readarr.$DOMAIN_NAME`) && Header(`Traefik-Auth-Key`, `$TRAEFIK_AUTH_KEY`)" # Bypass Auth for LunaSea on iOS
      # - "traefik.http.routers.readarr-rtr-bypass.priority=100"
      # ## HTTP Routers Auth
      # - "traefik.http.routers.readarr-rtr.entrypoints=websecure"
      # - "traefik.http.routers.readarr-rtr.rule=Host(`readarr.$DOMAIN_NAME`)"
      # - "traefik.http.routers.readarr-rtr.priority=99"
      # ## Middlewares
      # - "traefik.http.routers.readarr-rtr.middlewares=chain-oauth@file"
      # ## HTTP Services
      # - "traefik.http.routers.readarr-rtr-bypass.service=readarr-svc"
      # - "traefik.http.routers.readarr-rtr.service=readarr-svc"
      # - "traefik.http.services.readarr-svc.loadbalancer.server.port=8787"

      ### Prowlarr Routers
      ## HTTP Routers
      - "traefik.http.routers.prowlarr-login-rtr.entrypoints=websecure"
      - "traefik.http.routers.prowlarr-login-rtr.rule=Host(`prowlarr.$DOMAIN_NAME`)"
      - "traefik.http.routers.prowlarr-rtr.entrypoints=websecure"
      - "traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.$DOMAIN_NAME`) && {{ allow_admin_rule }}"
      ## Middlewares
      - "traefik.http.routers.prowlarr-login-rtr.middlewares=chain-oauth@file,back-to-home@file"
      - "traefik.http.routers.prowlarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.prowlarr-login-rtr.service=oauth-svc"
      - "traefik.http.routers.prowlarr-rtr.service=prowlarr-svc"
      - "traefik.http.services.prowlarr-svc.loadbalancer.server.port=9696"

  watchtower:
    extends:
      file: common.yml
      service: common-keys-core
    image: containrrr/watchtower
    container_name: watchtower
    networks:
      - socket_proxy
    environment:
      TZ: $TZ
      DOCKER_HOST: "tcp://socket-proxy:2375"
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_REVIVE_STOPPED: "true"
      WATCHTOWER_LOG_LEVEL: "info"
      WATCHTOWER_POLL_INTERVAL: "3600" # Check for updates every hour
      WATCHTOWER_TIMEOUT: "60s"
