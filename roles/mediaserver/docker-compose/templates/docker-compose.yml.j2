# {{ ansible_managed }}

version: "3.8"

networks:
  # Containers part of the reverse proxy system
  proxies:
    driver: bridge
    ipam:
      config:
        - subnet: 10.17.100.0/24

  # network for the docker socket
  socket_proxy:
    driver: bridge
    #ipam:
    #  config:
    #    - subnet: 192.168.91.0/24

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections
# More Info on how to use this: https://github.com/htpcBeginner/docker-traefik/pull/228

# Common environment values
x-default-environment: &default-tz-puid-pgid
  TZ: $TZ
  USER_ID:  0
  GROUP_ID: 0
  PUID: 0
  PGID: 0

x-primary-environment: &primary-tz-puid-pgid
  TZ: $TZ
  USER_ID:  $PUID
  GROUP_ID: $PGID
  PUID: $PUID
  PGID: $PGID

# Proxy Network and Security
x-network: &network
  networks:
    - proxies

x-network-vpn: &network-vpn
  network_mode: "service:wireguard"
  depends_on:
    - wireguard

x-security: &security
  security_opt:
    - no-new-privileges:true

# Keys common to some of the services
x-common-keys-core: &common-keys-core
  <<: [*network, *security]
  restart: always

x-common-keys-core-vpn: &common-keys-core-vpn
  <<: [*network-vpn, *security]
  restart: always

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  <<: [*network, *security]
  restart: unless-stopped

x-common-keys-apps-vpn: &common-keys-apps-vpn
  <<: [*network-vpn, *security]
  restart: unless-stopped

secrets:
  foundry_config:
    file: $DOCKER_DIR/secrets/foundry-config.json
  #htpasswd:
  #  file: $DOCKER_DIR/secrets/htpasswd
  #traefik_forward_auth:
  #  file: $DOCKER_DIR/secrets/traefik_forward_auth
  authelia_jwt_secret:
    file: $DOCKER_DIR/secrets/authelia_jwt_secret
  authelia_session_secret:
    file: $DOCKER_DIR/secrets/authelia_session_secret
  authelia_storage_encryption_key:
      file: $DOCKER_DIR/secrets/authelia_storage_encryption_key
  #authelia_notifier_smtp_password:
  #  file: $DOCKER_DIR/secrets/authelia_notifier_smtp_password
  #authelia_storage_mysql_password:
  #  file: $DOCKER_DIR/secrets/authelia_storage_mysql_password
  #authelia_duo_api_secret_key:
  #  file: $DOCKER_DIR/secrets/authelia_duo_api_secret_key


services:

########################### Core Services

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    networks:
      - socket_proxy
    #  socket_proxy:
    #    ipv4_address: 192.168.91.254 # You can specify a static IP
    privileged: true
    #ports:
    # - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer

  # Traefik 2 - Reverse Proxy
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: traefik
    image: traefik:v2.9
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      # - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      # - --entryPoints.ping.address=:8081
      - --api=true
      - --api.insecure=false
      - --api.dashboard=true
      #- --ping=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --experimental.plugins.AddMissingHeaders.moduleName=github.com/jerrywoo96/AddMissingHeaders
      - --experimental.plugins.AddMissingHeaders.version=v1.0.0
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      # Automatically set Host rule for services
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-basic-auth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add route53 as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=route53
      # - --entrypoints.https.http.tls.domains[0].main=$DOMAIN_NAME
      # - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAIN_NAME
      - --providers.docker.network=docker_proxies
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      #- --certificatesResolvers.route53.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.route53.acme.email=$EMAIL_ADDRESS
      - --certificatesResolvers.route53.acme.storage=/acme.json
      - --certificatesResolvers.route53.acme.dnsChallenge.provider=route53
      - --certificatesResolvers.route53.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
      # Disable SSL verification on backend
      - "--serverstransport.insecureskipverify=true"
    networks:
      proxies:
          ipv4_address: 10.17.100.200
      socket_proxy:
    #healthcheck:
    #  test: ["CMD", "traefik", "healthcheck", "--ping"]
    #  interval: 5s
    #  retries: 3
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      # - target: 8080
      #  published: 8080
      #  protocol: tcp
      #  mode: host
    #secrets:
       #- htpasswd
    volumes:
      - $CONTAINER_APPDATA_DIR/traefik/rules:/rules # file provider directory
      - $CONTAINER_APPDATA_DIR/traefik/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $CONTAINER_APPDATA_DIR/traefik/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
      - $CONTAINER_APPDATA_DIR/traefik/plugins-local:/plugins-local # traefik plugins
    environment:
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      AWS_REGION: $AWS_REGION
      AWS_HOSTED_ZONE_ID: $AWS_HOSTED_ZONE_ID
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=chain-redirect@file"
      #- "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAIN_NAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=route53"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAIN_NAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAIN_NAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Healthcheck/ping
      #- "traefik.http.routers.ping.rule=Host(`traefik.$DOMAIN_NAME`) && Path(`/ping`)"
      #- "traefik.http.routers.ping.tls=true"
      #- "traefik.http.routers.ping.service=ping@internal"
      ## Middlewares
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-no-auth@file" # For No Authentication
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-auth-basic@file" # For Basic HTTP Authentication
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file" # For Google OAuth
      - "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file" # For Authelia Authentication

  # Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: authelia
    # Check this before upgrading: https://github.com/authelia/authelia/blob/master/BREAKING.md
    image: authelia/authelia:4
    networks:
      proxies:
        ipv4_address: 10.17.100.201
    volumes:
      - $CONTAINER_APPDATA_DIR/authelia:/config
    environment:
      <<: *default-tz-puid-pgid
      AUTHELIA_JWT_SECRET_FILE: /run/secrets/authelia_jwt_secret
      AUTHELIA_SESSION_SECRET_FILE: /run/secrets/authelia_session_secret
      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /run/secrets/authelia_storage_encryption_key
      #AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE: /run/secrets/authelia_storage_mysql_password
      #AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /run/secrets/authelia_notifier_smtp_password
      #AUTHELIA_DUO_API_SECRET_KEY_FILE: /run/secrets/authelia_duo_api_secret_key
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_storage_encryption_key
      #- authelia_storage_mysql_password
      #- authelia_notifier_smtp_password
      #- authelia_duo_api_secret_key
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.authelia-rtr.entrypoints=https"
      - "traefik.http.routers.authelia-rtr.rule=Host(`authelia.$DOMAIN_NAME`) || HostHeader(`authelia.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.authelia-rtr.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"
  
  ddns-route53:
    image: crazymax/ddns-route53:latest
    container_name: ddns-route53
    environment:
      <<: *default-tz-puid-pgid
      SCHEDULE: "*/30 * * * *"
      LOG_LEVEL: info
      LOG_JSON: "false"
      DDNSR53_CREDENTIALS_ACCESSKEYID: $AWS_ACCESS_KEY_ID
      DDNSR53_CREDENTIALS_SECRETACCESSKEY: $AWS_SECRET_ACCESS_KEY
      DDNSR53_ROUTE53_HOSTEDZONEID: $AWS_HOSTED_ZONE_ID
      DDNSR53_ROUTE53_RECORDSSET_0_NAME: $DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_0_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_0_TTL: 300
      DDNSR53_ROUTE53_RECORDSSET_1_NAME: oauth.$DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_1_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_1_TTL: 300
      DDNSR53_ROUTE53_RECORDSSET_2_NAME: authelia.$DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_2_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_2_TTL: 300
      DDNSR53_ROUTE53_RECORDSSET_3_NAME: login.$DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_3_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_3_TTL: 300
      DDNSR53_ROUTE53_RECORDSSET_4_NAME: plex.$DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_4_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_4_TTL: 300
      DDNSR53_ROUTE53_RECORDSSET_5_NAME: qbt.$DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_5_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_5_TTL: 300
      DDNSR53_ROUTE53_RECORDSSET_6_NAME: files.$DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_6_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_6_TTL: 300
      DDNSR53_ROUTE53_RECORDSSET_7_NAME: tautulli.$DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_7_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_7_TTL: 300
      DDNSR53_ROUTE53_RECORDSSET_8_NAME: sonarr.$DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_8_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_8_TTL: 300
      DDNSR53_ROUTE53_RECORDSSET_9_NAME: radarr.$DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_9_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_9_TTL: 300
      DDNSR53_ROUTE53_RECORDSSET_10_NAME: jackett.$DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_10_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_10_TTL: 300
      DDNSR53_ROUTE53_RECORDSSET_11_NAME: index.$DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_11_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_11_TTL: 300
      DDNSR53_ROUTE53_RECORDSSET_12_NAME: foundry.$DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_12_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_12_TTL: 300
      DDNSR53_ROUTE53_RECORDSSET_13_NAME: crafty.$DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_13_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_13_TTL: 300
    restart: always

  {# # Traefik Whoami - a simple page to help debug headers and routing
  whoami:
    <<: *common-keys-apps
    image: "traefik/whoami"
    container_name: "whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami-rtr.entrypoints=https"
      - "traefik.http.routers.whoami-rtr.rule=Host(`whoami.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.middlewares.anon-user.plugin.AddMissingHeaders.requestheaders.Remote-User=guest"
      #- "traefik.http.middlewares.anon-user.headers.customrequestheaders.Remote-User=guest"
      - "traefik.http.routers.whoami-rtr.middlewares=chain-authelia@file,anon-user"
      ## HTTP Services
      - "traefik.http.routers.whoami-rtr.service=whoami-svc"
      - "traefik.http.services.whoami-svc.loadbalancer.server.port=80" #}

  # Autoindex - Simple Directory Index
  autoindex:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: autoindex
    image: dceoy/nginx-autoindex:latest
    # ports:
    #   - "$AUTOINDEX_PORT:80"
    volumes:
      - $USER_DIR/index:/var/lib/nginx/html:ro # Location you want to index
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.autoindex-rtr.entrypoints=https"
      - "traefik.http.routers.autoindex-rtr.rule=Host(`index.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.autoindex-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.autoindex-rtr.service=autoindex-svc"
      - "traefik.http.services.autoindex-svc.loadbalancer.server.port=80"

  # Organizr - Unified Frontend
  organizr:
    <<: *common-keys-core
    container_name: organizr
    image: organizr/organizr
#    ports:
#      - "$ORGANIZR_PORT:80"
    volumes:
      - $CONTAINER_APPDATA_DIR/organizr:/config
    environment:
      <<: *primary-tz-puid-pgid
      fpm: "true" #true or false | using true will provide better performance
      branch: v2-master #v2-master or #v2-develop
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.organizr-rtr.entrypoints=https"
      - "traefik.http.routers.organizr-rtr.rule=Host(`$DOMAIN_NAME`,`www.$DOMAIN_NAME`, `login.$DOMAIN_NAME`)"
      ## Middlewares
      #- "traefik.http.middlewares.default-guest-user.plugin.AddMissingHeaders.requestheaders.Remote-User=guest"
      #- "traefik.http.routers.organizr-rtr.middlewares=chain-authelia@file,default-guest-user"
      - "traefik.http.routers.organizr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"

  unifi-controller:
    <<: *common-keys-core
    image: lscr.io/linuxserver/unifi-controller
    container_name: unifi-controller
    environment:
      <<: *default-tz-puid-pgid
      MEM_LIMIT: 1024 #optional
      MEM_STARTUP: 1024 #optional
    volumes:
      - $CONTAINER_APPDATA_DIR/unifi:/config
    ports:
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 8443:8443
      #- 1900:1900/udp #optional
      - 8843:8843 #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514/udp #optional
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.unifi-rtr.tls=true"
      - "traefik.http.routers.unifi-rtr.entrypoints=https"
      - "traefik.http.routers.unifi-rtr.rule=Host(`unifi.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.unifi-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.unifi-rtr.service=unifi-svc"
      - "traefik.http.services.unifi-svc.loadbalancer.passHostHeader=true"
      - "traefik.http.services.unifi-svc.loadbalancer.server.scheme=https"
      - "traefik.http.services.unifi-svc.loadbalancer.server.port=8443"

  # Speedtest tracker - Runs a speedtest check every hour and graphs the results
  speedtest:
    <<: *common-keys-core
    container_name: speedtest
    image: ghcr.io/alexjustesen/speedtest-tracker:latest
    volumes:
      - $CONTAINER_APPDATA_DIR/speedtest:/config
    environment:
      <<: *primary-tz-puid-pgid
      OOKLA_EULA_GDPR: "true"
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: "200k"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.speedtest-rtr.entrypoints=https"
      - "traefik.http.routers.speedtest-rtr.rule=Host(`speedtest.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.speedtest-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.speedtest-rtr.service=speedtest-svc"
      - "traefik.http.services.speedtest-svc.loadbalancer.server.scheme=https"
      - "traefik.http.services.speedtest-svc.loadbalancer.server.port=443"

  ############################# Downloaders

  # Wireguard - VPN Client for other services
  # Command to test if connected: docker exec -it qbittorrent curl -w "\n" ifconfig.me
  wireguard:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: ghcr.io/linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - $CONTAINER_APPDATA_DIR/wireguard:/config
      - /lib/modules:/lib/modules
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    # Traefik routers must be connected to this service in order to route correctly
    labels:
      - "traefik.enable=true"
      ### QBittorent Router
      ## HTTP Routers
      - "traefik.http.routers.qbittorrent-rtr.entrypoints=https"
      - "traefik.http.routers.qbittorrent-rtr.rule=Host(`qbt.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.qbittorrent-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.qbittorrent-rtr.service=qbittorrent-svc"
      - "traefik.http.services.qbittorrent-svc.loadbalancer.server.port=8080"
      ### TV Sonarr Router
      ## HTTP Routers
      - "traefik.http.routers.tv-sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.tv-sonarr-rtr.rule=Host(`sonarr.$DOMAIN_NAME`) && PathPrefix(`/tv`)"
      ## Middlewares
      - "traefik.http.routers.tv-sonarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.tv-sonarr-rtr.service=tv-sonarr-svc"
      - "traefik.http.services.tv-sonarr-svc.loadbalancer.server.port=8989"
      ### Radarr Router
      ## HTTP Routers
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  qbittorrent:
    <<: *common-keys-apps-vpn
    image: lscr.io/linuxserver/qbittorrent
    container_name: qbittorrent
    environment:
      <<: *default-tz-puid-pgid
      #WEBUI_PORT=8080
    volumes:
      - $CONTAINER_APPDATA_DIR/qbittorrent:/config
      - $DATA_DIR:/data
    deploy:
      resources:
          limits:
            cpus: "0.50"
            memory: 4096M
    # traefik labels under wireguard

  jackett:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/jackett
    container_name: jackett
    environment:
      <<: *primary-tz-puid-pgid
      AUTO_UPDATE: "true" #optional
    volumes:
      - $CONTAINER_APPDATA_DIR/jackett:/config
    networks:
      proxies:
        ipv4_address: 10.17.100.101
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jackett-rtr.entrypoints=https"
      - "traefik.http.routers.jackett-rtr.rule=Host(`jackett.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.jackett-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.jackett-rtr.service=jackett-svc"
      - "traefik.http.services.jackett-svc.loadbalancer.server.port=9117"

  ############################# Media

  plex:
    restart: always
    network_mode: host
    security_opt:
      - no-new-privileges:true
    image: linuxserver/plex
    container_name: plex
    runtime: nvidia
    environment:
      <<: *primary-tz-puid-pgid
      VERSION: latest
      NVIDIA_VISIBLE_DEVICES: ALL
    volumes:
      - '$USER_DIR/plex/config:/config'
      - '$USER_DIR/plex/transcode:/transcode'
      - '$DATA_DIR:/data:ro'
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  plexautolanguages:
    <<: *common-keys-apps
    image: remirigal/plex-auto-languages:latest
    container_name: plexautolanguages
    environment:
      <<: *default-tz-puid-pgid
      PLEX_URL: "http://$HOST_IP:32400"
      PLEX_TOKEN: $PLEX_TOKEN
    volumes:
      - '$CONTAINER_APPDATA_DIR/plexautolanguages:/config'

  # Audio and Subtitle manager for Plex
  pasta:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: cglatot/pasta
    container_name: pasta
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.pasta-rtr.entrypoints=https"
      - "traefik.http.routers.pasta-rtr.rule=Host(`pasta.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.pasta-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.pasta-rtr.service=pasta-svc"
      - "traefik.http.services.pasta-svc.loadbalancer.server.port=80"

  tautulli:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: linuxserver/tautulli
    container_name: tautulli
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - '$CONTAINER_APPDATA_DIR/tautulli:/config'
      - '$USER_DIR/plex/config/Library/Application Support/Plex Media Server/Logs/:/logs'
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"

  {# # Jellyfin - Media Server
  jellyfin:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    #devices:
    #  - /dev/dri:/dev/dri # for harware transcoding
    ports:
      #- "$JELLYFIN_PORT:8096"
      - "8920:8920" # Emby also uses same port if running both
    environment:
      <<: *default-tz-puid-pgid
      UMASK_SET: 022
    volumes:
      - $CONTAINER_APPDATA_DIR/jellyfin:/config
      - $CONTAINER_APPDATA_DIR/jellyfin/metadata:/config/metadata
      - $DATA_DIR:/data:ro
      #- /dev/shm:/data/transcode # Offload transcoding to RAM if you have enough RAM
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jellyfin-rtr.entrypoints=https"
      - "traefik.http.routers.jellyfin-rtr.rule=Host(`jelly.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.jellyfin-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.jellyfin-rtr.service=jellyfin-svc"
      - "traefik.http.services.jellyfin-svc.loadbalancer.server.port=8096" #}

  #TODO Replace with Lidarr
  {# beets:
    image: linuxserver/beets
    container_name: beets
    restart: unless-stopped
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - '$CONTAINER_APPDATA_DIR/beets:/config'
      - '$DATA_DIR/Music:/music'
    networks:
      - isolated
    security_opt:
      - no-new-privileges:true #}

  recyclarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: recyclarr/recyclarr
    container_name: recyclarr
    user: '0:0'
    environment:
      <<: *primary-tz-puid-pgid
    volumes:
      - $CONTAINER_APPDATA_DIR/recyclarr:/config
    
  anime-sonarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/sonarr
    container_name: anime-sonarr
    environment:
      <<: *primary-tz-puid-pgid
    volumes:
      - '$CONTAINER_APPDATA_DIR/anime-sonarr:/config'
      - '$DATA_DIR:/data'
      - "/etc/localtime:/etc/localtime:ro"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.anime-sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.anime-sonarr-rtr.rule=Host(`sonarr.$DOMAIN_NAME`) && PathPrefix(`/anime`)"
      ## Middlewares
      - "traefik.http.routers.anime-sonarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.anime-sonarr-rtr.service=anime-sonarr-svc"
      - "traefik.http.services.anime-sonarr-svc.loadbalancer.server.port=8989"

  tv-sonarr:
    <<: *common-keys-apps-vpn # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/sonarr
    container_name: tv-sonarr
    environment:
      <<: *primary-tz-puid-pgid
    volumes:
      - '$CONTAINER_APPDATA_DIR/tv-sonarr:/config'
      - '$DATA_DIR:/data'
      - "/remote/complete/tv:/remote/complete/"
      - "/remote/watch/tv:/remote/watch/"
      - "/etc/localtime:/etc/localtime:ro"
      #Traefik labels under wireguard

  radarr:
    <<: *common-keys-apps-vpn # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      <<: *primary-tz-puid-pgid
    volumes:
      - '$CONTAINER_APPDATA_DIR/radarr:/config'
      - '$DATA_DIR:/data'
      - "/remote/complete/movies:/remote/complete/"
      - "/remote/watch/movies:/remote/watch/"
      - "/etc/localtime:/etc/localtime:ro"
      #Traefik labels under wireguard

  {# # Lidarr - Music Management
  # Set url_base in lidarr settings if using PathPrefix
  lidarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    #ports:
    #  - "$LIDARR_PORT:8686"
    volumes:
      - $CONTAINER_APPDATA_DIR/lidarr:/config
      - $DATA_DIR:/data
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      #- "traefik.http.routers.lidarr-rtr-bypass.entrypoints=https"
      #- "traefik.http.routers.lidarr-rtr-bypass.rule=Host(`lidarr.$DOMAIN_NAME`) && (Headers(`X-Api-Key`, `$LIDARR_API_KEY`) || Query(`apikey`, `$LIDARR_API_KEY`))"
      #- "traefik.http.routers.lidarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.lidarr-rtr.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr.rule=Host(`lidarr.$DOMAIN_NAME`)"
      - "traefik.http.routers.lidarr-rtr.priority=99"
      ## Middlewares
      #- "traefik.http.routers.lidarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.lidarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.lidarr-rtr.service=lidarr-svc"
      #- "traefik.http.routers.lidarr-rtr-bypass.service=lidarr-svc"
      - "traefik.http.services.lidarr-svc.loadbalancer.server.port=8686" #}

  {# # Readarr - Books management
  # Set url_base in readarr settings if using PathPrefix
  readarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: hotio/readarr:nightly
    container_name: readarr
    # ports:
    #  - "$READARR_PORT:8787"
    volumes:
      - $CONTAINER_APPDATA_DIR/readarr:/config
      - $DATA_DIR:/data
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
      UMASK: 002
      #ARGS: ""
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.readarr-rtr.entrypoints=https"
      - "traefik.http.routers.readarr-rtr.rule=Host(`readarr.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.readarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.readarr-rtr.service=readarr-svc"
      - "traefik.http.services.readarr-svc.loadbalancer.server.port=8787" #}

  ############################# Utilites

  # File Browser - Explorer
  # The following commands need to be ran manually configure proxy auth the first time.
  # docker-compose run filebrowser config
  # docker-compose run filebrowser config cat
  filebrowser:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: filebrowser/filebrowser
    container_name: filebrowser
    user: $PUID:$PGID
    volumes:
      - /data/:/srv/:ro
    environment:
      FB_NOAUTH: noauth
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.filebrowser-rtr.entrypoints=https"
      - "traefik.http.routers.filebrowser-rtr.rule=Host(`files.$DOMAIN_NAME`)"
      ## Middlewares
      #- "traefik.http.middlewares.default-guest-user.plugin.AddMissingHeaders.requestheaders.Remote-User=guest"
      - "traefik.http.routers.filebrowser-rtr.middlewares=chain-authelia@file" # ,default-guest-user"
      ## HTTP Services
      - "traefik.http.routers.filebrowser-rtr.service=filebrowser-svc"
      - "traefik.http.services.filebrowser-svc.loadbalancer.server.port=80"

  {# # qDirStat - Directory Statistics
  qdirstat:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: jlesage/qdirstat:latest
    container_name: qdirstat
    # ports:
    #   - "$QDIRSTAT_PORT:5800"
    volumes:
      - $CONTAINER_APPDATA_DIR/qdirstat/config:/config:rw
      - $DATA_DIR:/storage/data:ro
    environment:
      <<: *default-tz-puid-pgid
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.qdirstat-rtr.entrypoints=https"
      - "traefik.http.routers.qdirstat-rtr.rule=Host(`qdirstat.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.qdirstat-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.qdirstat-rtr.service=qdirstat-svc"
      - "traefik.http.services.qdirstat-svc.loadbalancer.server.port=5800" #}

  ############################# Game Servers

  {# # Foundry VTT - A server for TTRPGS
  foundry:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: felddy/foundryvtt:release
    container_name: foundry
    volumes:
      - $CONTAINER_APPDATA_DIR/foundry:/data
    environment:
      FOUNDRY_UID: $PUID
      FOUNDRY_GID: $PGID
      TIMEZONE: $TZ
      FOUNDRY_HOSTNAME: "foundry.$DOMAIN_NAME"
      #FOUNDRY_PROXY_PORT: 443
      FOUNDRY_PROXY_SSL: "true"
      FOUNDRY_MINIFY_STATIC_FILES: "true"
    secrets:
      - source: foundry_config
        target: config.json
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.foundry-rtr.entrypoints=https"
      - "traefik.http.routers.foundry-rtr.rule=Host(`foundry.$DOMAIN_NAME`)"
      - "traefik.http.routers.foundry-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.foundry-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.foundry-rtr.service=foundry-svc"
      - "traefik.http.services.foundry-svc.loadbalancer.server.port=30000" #}

  # Crafty Controller - Minecraft server manager
  crafty-web:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: registry.gitlab.com/crafty-controller/crafty-4:latest
    container_name: crafty
    environment:
      <<: *primary-tz-puid-pgid
    ports:
      - "8123:8123" # DYNMAP
      - "19132:19132/udp" # BEDROCK
      - "25500-25600:25500-25600" # MC SERV PORT RANGE
    volumes:
      - "$USER_DIR/minecraft/backups:/crafty/backups"
      - "$USER_DIR/minecraft/logs:/crafty/logs"
      - "$USER_DIR/minecraft/servers:/crafty/servers"
      - "$USER_DIR/minecraft/config:/crafty/app/config"
      - "$USER_DIR/minecraft/import:/crafty/import"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.crafty-rtr.entrypoints=https"
      - "traefik.http.routers.crafty-rtr.rule=Host(`crafty.$DOMAIN_NAME`)"
      - "traefik.http.routers.crafty-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.crafty-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.crafty-rtr.service=crafty-svc"
      - "traefik.http.services.crafty-svc.loadbalancer.server.scheme=https"
      - "traefik.http.services.crafty-svc.loadbalancer.server.port=8443"

  {# # Don't Starve Server - server for Don't Starve Together
  dst-server:
    image: jamesits/dst-server:latest
    container_name: dst-server
    profiles:
      - donotstart
    environment:
      <<: *default-tz-puid-pgid
    ports:
      - "10999-11000:10999-11000/udp"
      - "12346-12347:12346-12347/udp"
    volumes:
      - "$CONTAINER_APPDATA_DIR/dst-server/:/data:rw" #}

  ############################# MAINTENANCE

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    networks:
      - socket_proxy
    environment:
      DOCKER_HOST: "tcp://socket-proxy:2375"
      WATCHTOWER_LABEL_ENABLE: "true"
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_REVIVE_STOPPED: "true"
      WATCHTOWER_LOG_LEVEL: "info"
      WATCHTOWER_POLL_INTERVAL: "30"
      WATCHTOWER_TIMEOUT: "10s"

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    networks:
      - socket_proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - $CONTAINER_APPDATA_DIR/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375