# {{ ansible_managed }}

version: "3.8"

networks:
  proxies:
    # Containers part of the reverse proxy system
    driver: bridge
  socket_proxy:
    # network for the docker socket
    driver: bridge
    #ipam:
    #  config:
    #    - subnet: 192.168.91.0/24

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections
# More Info on how to use this: https://github.com/htpcBeginner/docker-traefik/pull/228

# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  USER_ID: ${PUID}
  GROUP_ID: ${PGID}
  PUID: $PUID
  PGID: $PGID

# Proxy Network and Security
x-network-and-security: &network-and-security
  networks:
    - proxies
  security_opt:
    - no-new-privileges:true

# Keys common to some of the services
x-common-keys-core: &common-keys-core
  <<: *network-and-security
  restart: always
  # profiles:
  # - basic

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  <<: *network-and-security
  restart: unless-stopped
  # profiles:
  # - apps

secrets:
  htpasswd:
    file: $DOCKER_DIR/secrets/htpasswd
  traefik_forward_auth:
    file: $DOCKER_DIR/secrets/traefik_forward_auth
  mysql_root_password:
    file: $DOCKER_DIR/secrets/mysql_root_password
  authelia_jwt_secret:
    file: $DOCKER_DIR/secrets/authelia_jwt_secret
  authelia_session_secret:
    file: $DOCKER_DIR/secrets/authelia_session_secret
  authelia_storage_encryption_key:
      file: $DOCKER_DIR/secrets/authelia_storage_encryption_key
  #authelia_notifier_smtp_password:
  #  file: $DOCKER_DIR/secrets/authelia_notifier_smtp_password
  #authelia_storage_encryption_key:
  #  file: $DOCKER_DIR/secrets/authelia_storage_encryption_key
  #authelia_storage_mysql_password:
  #  file: $DOCKER_DIR/secrets/authelia_storage_mysql_password
  #authelia_duo_api_secret_key:
  #  file: $DOCKER_DIR/secrets/authelia_duo_api_secret_key


services:

########################### Core Services

  # Traefik 2 - Reverse Proxy
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: traefik
    image: traefik:2.6
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      # - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      # - --entryPoints.ping.address=:8081
      - --api=true
      - --api.insecure=false
      - --api.dashboard=true
      #- --ping=true
      #- --pilot.token=$TRAEFIK_PILOT_TOKEN
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      # Automatically set Host rule for services
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-basic-auth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add route53 as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=route53
      # - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME0
      # - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME0
      - --providers.docker.network=docker_proxies
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      #- --certificatesResolvers.route53.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.route53.acme.email={{ admin_email_address }}
      - --certificatesResolvers.route53.acme.storage=/acme.json
      - --certificatesResolvers.route53.acme.dnsChallenge.provider=route53
      - --certificatesResolvers.route53.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
      # Disable SSL verification on backend
      - "--serverstransport.insecureskipverify=true"
    networks:
      - proxies
      - socket_proxy
      #t2_proxy:
      #  ipv4_address: 192.168.90.254 # You can specify a static IP
    #healthcheck:
    #  test: ["CMD", "traefik", "healthcheck", "--ping"]
    #  interval: 5s
    #  retries: 3
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      # - target: 8080
      #  published: 8080
      #  protocol: tcp
      #  mode: host
    secrets:
       - htpasswd
    volumes:
      - {{ traefik_directory }}/rules:/rules # file provider directory
      - {{ traefik_directory }}/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - {{ traefik_directory }}/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
    environment:
      - AWS_ACCESS_KEY_ID={{ route53_access_key }}
      - AWS_SECRET_ACCESS_KEY={{ route53_secret_access_key }}
      - AWS_REGION={{ route53_region }}
      - AWS_HOSTED_ZONE_ID={{ route53_zone_id }}
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=chain-redirect@file"
      #- "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME0`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=route53"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME0"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME0"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Healthcheck/ping
      #- "traefik.http.routers.ping.rule=Host(`traefik.$DOMAINNAME0`) && Path(`/ping`)"
      #- "traefik.http.routers.ping.tls=true"
      #- "traefik.http.routers.ping.service=ping@internal"
      ## Middlewares
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-no-auth@file" # For No Authentication
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-auth-basic@file" # For Basic HTTP Authentication
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file" # For Google OAuth
      - "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file" # For Authelia Authentication

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    networks:
      - socket_proxy
    #  socket_proxy:
    #    ipv4_address: 192.168.91.254 # You can specify a static IP
    privileged: true
    #ports:
    # - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer


  # Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: authelia
    # Check this before upgrading: https://github.com/authelia/authelia/blob/master/BREAKING.md
    image: authelia/authelia:4
    #depends_on:
      #- mariadb
      #- redis
    volumes:
      - $DOCKER_CONTAINER_DIR/authelia:/config
    environment:
      <<: *default-tz-puid-pgid
      AUTHELIA_JWT_SECRET_FILE: /run/secrets/authelia_jwt_secret
      AUTHELIA_SESSION_SECRET_FILE: /run/secrets/authelia_session_secret
      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /run/secrets/authelia_storage_encryption_key
      #AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE: /run/secrets/authelia_storage_mysql_password
      #AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /run/secrets/authelia_notifier_smtp_password
      #AUTHELIA_DUO_API_SECRET_KEY_FILE: /run/secrets/authelia_duo_api_secret_key
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_storage_encryption_key
      #- authelia_storage_mysql_password
      #- authelia_notifier_smtp_password
      #- authelia_duo_api_secret_key
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.authelia-rtr.entrypoints=https"
      - "traefik.http.routers.authelia-rtr.rule=HostHeader(`authelia.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.authelia-rtr.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"

  {# # Google OAuth - Single Sign On using OAuth 2.0
  # https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  oauth:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    # image: thomseddon/traefik-forward-auth:2.1-arm # Use this image with Raspberry Pi
    # Allow apps to bypass OAuth. Radarr example below will bypass OAuth if API key is present in the request (eg. from NZB360 mobile app).
    # While this is one way, the recommended way is to bypass authentication using Traefik labels shown in some of the -Arr apps in this file.
    # command: --rule.radarr.action=allow --rule.radarr.rule="Headers(`X-Api-Key`, `$RADARR_API_KEY`)"
    # command: --rule.sabnzbd.action=allow --rule.sabnzbd.rule="HeadersRegexp(`X-Forwarded-Uri`, `$SABNZBD_API_KEY`)"
    environment:
      CONFIG: /config
      COOKIE_DOMAIN: $DOMAINNAME0
      INSECURE_COOKIE: "false"
      AUTH_HOST: oauth.$DOMAINNAME0
      URL_PATH: /_oauth
      LOG_LEVEL: warn # set to trace while testing bypass rules
      LOG_FORMAT: text
      LIFETIME: 86400 # 1 day
      DEFAULT_ACTION: auth
      DEFAULT_PROVIDER: google
    secrets:
      - source: traefik_forward_auth
        target: /config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181" #}


  # Organizr - Unified Frontend
  organizr:
    <<: *common-keys-core
    container_name: organizr
    image: organizr/organizr
#    ports:
#      - "$ORGANIZR_PORT:80"
    volumes:
      - $DOCKER_CONTAINER_DIR/organizr:/config
    environment:
      <<: *default-tz-puid-pgid
      fpm: "true" #true or false | using true will provide better performance
      branch: v2-master #v2-master or #v2-develop
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.organizr-rtr.entrypoints=https"
      - "traefik.http.routers.organizr-rtr.rule=Host(`organizr.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.organizr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"

  muximux:
    <<: *common-keys-core
    image: linuxserver/muximux
    container_name: muximux
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - '$DOCKER_CONTAINER_DIR/muximux:/config'
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.muximux-rtr.entrypoints=https"
      - "traefik.http.routers.muximux-rtr.rule=Host(`$DOMAINNAME0`,`www.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.muximux-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.muximux-rtr.service=muximux-svc"
      - "traefik.http.services.muximux-svc.loadbalancer.server.port=80"

  unifi-controller:
    <<: *common-keys-core
    image: lscr.io/linuxserver/unifi-controller
    container_name: unifi-controller
    environment:
      <<: *default-tz-puid-pgid
      MEM_LIMIT: 1024M #optional
      MEM_STARTUP: 1024M #optional
    volumes:
      - $DOCKER_CONTAINER_DIR/unifi:/config
    ports:
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 8443:8443
      #- 1900:1900/udp #optional
      - 8843:8843 #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514/udp #optional
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.unifi-rtr.tls=true"
      - "traefik.http.routers.unifi-rtr.entrypoints=https"
      - "traefik.http.routers.unifi-rtr.rule=Host(`unifi.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.unifi-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.unifi-rtr.service=unifi-svc"
      - "traefik.http.services.unifi-svc.loadbalancer.passHostHeader=true"
      - "traefik.http.services.unifi-svc.loadbalancer.server.scheme=https"
      - "traefik.http.services.unifi-svc.loadbalancer.server.port=8443"

  ############################# Database

  {# # MariaDB - MySQL Database
  # After starting container for first time dexec and mysqladmin -u root password <password>
  mariadb:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: mariadb
    image: lscr.io/linuxserver/mariadb
    #ports:
    #  - "$MARIADB_PORT:3306"
    volumes:
      - $DOCKER_CONTAINER_DIR/appdata/mariadb/data:/config
    environment:
      <<: *default-tz-puid-pgid
      FILE__MYSQL_ROOT_PASSWORD: /run/secrets/mysql_root_password # Note FILE__ (double underscore) - Issue #127
    secrets:
      - mysql_root_password

  # phpMyAdmin - Database management
  # Create a new user with admin privileges. Cannot login as MySQL root for some reason.
  phpmyadmin:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      - PMA_HOST=$MARIADB_HOST
      - PMA_PORT=$MARIADB_PORT
      #- PMA_ARBITRARY=1
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
    secrets:
      - mysql_root_password
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.phpmyadmin-rtr.entrypoints=https"
      - "traefik.http.routers.phpmyadmin-rtr.rule=Host(`pma.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc"
      - "traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=80" #}

  ############################# Downloaders

  vpn:
    image: dperson/openvpn-client
    container_name: vpn
    # cap_add, security_opt, and volume required for the image to function
    cap_add:
      - net_admin
    environment:
      TZ: ${TZ}
    command: -d
    # if using '-d' or 'DNS' you can't enable the `read_only: true` option
    read_only: false
    tmpfs:
      - /run
      - /tmp
    restart: unless-stopped
    security_opt:
      - label:disable
    stdin_open: true
    tty: true
    volumes:
      - /dev/net:/dev/net:z
      - $DOCKER_CONTAINER_DIR/vpn:/vpn
    # Put .ovpn configuration file in the /vpn directory (in "volumes:" above or
    # launch using the command line arguments, IE pick one:
    #  - ./vpn:/vpn
    # command: 'server;user;password[;port]'
    ports:
      - 6881:6881
      - 6881:6881/udp
    networks:
      - proxies
    security_opt:
      - no-new-privileges:true

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent
    container_name: qbittorrent
    restart: unless-stopped
    environment:
      <<: *default-tz-puid-pgid
      #WEBUI_PORT=8080
    volumes:
      - $DOCKER_CONTAINER_DIR/qbittorrent:/config
      - {{ media_data_path }}:/data
    network_mode: "service:vpn"
    depends_on:
      - vpn
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.qbittorrent-rtr.entrypoints=https"
      - "traefik.http.routers.qbittorrent-rtr.rule=Host(`qbt.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.qbittorrent-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.qbittorrent-rtr.service=qbittorrent-svc"
      - "traefik.http.services.qbittorrent-svc.loadbalancer.server.port=8080"

  jackett:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/jackett
    container_name: jackett
    environment:
      <<: *default-tz-puid-pgid
      AUTO_UPDATE: "true" #optional
    volumes:
      - $DOCKER_CONTAINER_DIR/jackett:/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jackett-rtr.entrypoints=https"
      - "traefik.http.routers.jackett-rtr.rule=Host(`jackett.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.jackett-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.jackett-rtr.service=jackett-svc"
      - "traefik.http.services.jackett-svc.loadbalancer.server.port=9117"

  ############################# Media

  plex:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: linuxserver/plex
    container_name: plex
    runtime: nvidia
    ports:
      - "32400:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      #- "$PLEX_WEB_TOOLS_PORT:33400"
    environment:
      <<: *default-tz-puid-pgid
      VERSION: latest
      NVIDIA_VISIBLE_DEVICES: ALL
    volumes:
      - '$DOCKER_CONTAINER_DIR/plex/config:/config'
      - '{{ media_data_path }}:/data'
      - '$DOCKER_CONTAINER_DIR/plex/transcode:/transcode'
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.plexms-rtr.entrypoints=https"
      - "traefik.http.routers.plexms-rtr.rule=Host(`plex.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.plexms-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.plexms-rtr.service=plexms-svc"
      - "traefik.http.services.plexms-svc.loadbalancer.server.port=32400"


  tautulli:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: linuxserver/tautulli
    container_name: tautulli
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - '$DOCKER_CONTAINER_DIR/tautulli:/config'
      - '$DOCKER_CONTAINER_DIR/plex/config/Library/Application Support/Plex Media Server/Logs/:/logs'
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"

  #TODO Replace with Lidarr
  {# beets:
    image: linuxserver/beets
    container_name: beets
    restart: unless-stopped
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - '$DOCKER_CONTAINER_DIR/beets:/config'
      - '{{ media_data_path }}/Music:/music'
    networks:
      - isolated
    security_opt:
      - no-new-privileges:true #}

  anime-sonarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/sonarr
    container_name: anime-sonarr
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - '$DOCKER_CONTAINER_DIR/anime-sonarr:/config'
      - '{{ media_data_path }}:/data'
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.anime-sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.anime-sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME0`) && PathPrefix(`/anime`)"
      ## Middlewares
      - "traefik.http.routers.anime-sonarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.anime-sonarr-rtr.service=anime-sonarr-svc"
      - "traefik.http.services.anime-sonarr-svc.loadbalancer.server.port=8989"

  tv-sonarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/sonarr
    container_name: tv-sonarr
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - '$DOCKER_CONTAINER_DIR/tv-sonarr:/config'
      - '{{ media_data_path }}:/data'
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tv-sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.tv-sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME0`) && PathPrefix(`/tv`)"
      ## Middlewares
      - "traefik.http.routers.tv-sonarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.tv-sonarr-rtr.service=tv-sonarr-svc"
      - "traefik.http.services.tv-sonarr-svc.loadbalancer.server.port=8989"

  radarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - '$DOCKER_CONTAINER_DIR/radarr:/config'
      - '{{ media_data_path }}:/data'
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  ############################# Utilites

  # File Browser - Explorer
  filebrowser:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: filebrowser/filebrowser:s6
    container_name: filebrowser
    #ports:
    #  - "$FILEBROWSER_PORT:80"
    volumes:
      - $DOCKER_CONTAINER_DIR/filebrowser:/config
      - $DOCKER_CONTAINER_DIR/filebrowser/filebrowser.db:/database/filebrowser.db
      - /data/:/srv/data
      - /home/jeremy/:/srv/home
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.filebrowser-rtr.entrypoints=https"
      - "traefik.http.routers.filebrowser-rtr.rule=Host(`files.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.filebrowser-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.filebrowser-rtr.service=filebrowser-svc"
      - "traefik.http.services.filebrowser-svc.loadbalancer.server.port=80"

  ############################# Game Servers
  # Crafty Controller - Minecraft server manager
  crafty-web:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: shawly/crafty-web
    container_name: crafty
    environment:
      <<: *default-tz-puid-pgid
      INSTALL_JAVA8: "true"
      INSTALL_JAVA11: "true"
      INSTALL_JAVA17: "true"
    ports:
      - "25565-25570:25565-25570/tcp"
      - "25565-25570:25565-25570/udp"
      #- "8000:8000"
    volumes:
      - "$DOCKER_CONTAINER_DIR/crafty/database:/crafty_db:rw"
      - "$DOCKER_CONTAINER_DIR/crafty/backups:/crafty_web/backups:rw"
      - "$DOCKER_CONTAINER_DIR/crafty/minecraft:/var/opt/minecraft"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.crafty-rtr.entrypoints=https"
      - "traefik.http.routers.crafty-rtr.rule=Host(`crafty.$DOMAINNAME0`)"
      - "traefik.http.routers.crafty-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.crafty-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.crafty-rtr.service=crafty-svc"
      - "traefik.http.services.crafty-svc.loadbalancer.server.scheme=https"
      - "traefik.http.services.crafty-svc.loadbalancer.server.port=8000"

  # Don't Starve Server - server for Don't Starve Together
  dst-server:
    image: jamesits/dst-server:latest
    container_name: dst-server
    profiles:
      - donotstart
    environment:
      <<: *default-tz-puid-pgid
    ports:
      - "10999-11000:10999-11000/udp"
      - "12346-12347:12346-12347/udp"
    volumes:
      - "$DOCKER_CONTAINER_DIR/dst-server/:/data:rw"

  ############################# MAINTENANCE

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    networks:
      - socket_proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - $DOCKER_CONTAINER_DIR/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375