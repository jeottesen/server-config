# {{ ansible_managed }}

version: "3.8"

networks:
  proxies:
    # Containers part of the reverse proxy system
    driver: bridge
  isolated:
    # Containers not part of the reverse proxy system
    driver: bridge
  socket_proxy:
    # network for the docker socket
    driver: bridge
    #ipam:
    #  config:
    #    - subnet: 192.168.91.0/24

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections
# More Info on how to use this: https://github.com/htpcBeginner/docker-traefik/pull/228

# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Proxy Network and Security
x-network-and-security: &network-and-security
  networks:
    - proxies
  security_opt:
    - no-new-privileges:true

# Keys common to some of the services
x-common-keys-core: &common-keys-core
  <<: *network-and-security
  restart: always
  # profiles:
  # - basic

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  <<: *network-and-security
  restart: unless-stopped
  # profiles:
  # - apps

services:

########################### Core Services


  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: traefik
    image: traefik:2.6
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      # - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      # - --entryPoints.ping.address=:8081
      - --api=true
      - --api.insecure=true
      - --api.dashboard=true
      #- --ping=true
      #- --pilot.token=$TRAEFIK_PILOT_TOKEN
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      # Automatically set Host rule for services
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-oauth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=route53
      # - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      # - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      - --providers.docker.network=docker_proxies
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --certificatesResolvers.route53.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.route53.acme.email={{ admin_email_address }}
      - --certificatesResolvers.route53.acme.storage=/acme.json
      - --certificatesResolvers.route53.acme.dnsChallenge.provider=route53
      - --certificatesResolvers.route53.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      - proxies
      - socket_proxy
      #t2_proxy:
      #  ipv4_address: 192.168.90.254 # You can specify a static IP
    #healthcheck:
    #  test: ["CMD", "traefik", "healthcheck", "--ping"]
    #  interval: 5s
    #  retries: 3
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - {{ traefik_directory }}/rules:/rules # file provider directory
      - {{ traefik_directory }}/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - {{ traefik_directory }}/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
    environment:
      - AWS_ACCESS_KEY_ID={{ route53_access_key }}
      - AWS_SECRET_ACCESS_KEY={{ route53_secret_access_key }}
      - AWS_REGION={{ route53_region }}
      - AWS_HOSTED_ZONE_ID={{ route53_zone_id }}
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Healthcheck/ping
      #- "traefik.http.routers.ping.rule=Host(`traefik.$DOMAINNAME`) && Path(`/ping`)"
      #- "traefik.http.routers.ping.tls=true"
      #- "traefik.http.routers.ping.service=ping@internal"
      ## Middlewares
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"

    # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    networks:
      - socket_proxy
    #  socket_proxy:
    #    ipv4_address: 192.168.91.254 # You can specify a static IP
    privileged: true
    #ports:
    # - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer




  unifi-controller:
    image: lscr.io/linuxserver/unifi-controller
    container_name: unifi-controller
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - MEM_LIMIT=1024M #optional
      - MEM_STARTUP=1024M #optional
    volumes:
      - {{ container_data_path }}/unifi:/config
    ports:
      - 3478:3478/udp
      - 10001:10001/udp
      # - 8080:8080
      - 8443:8443
      - 1900:1900/udp #optional
      - 8843:8843 #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514/udp #optional
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  vpn:
    image: dperson/openvpn-client
    container_name: vpn
    # cap_add, security_opt, and volume required for the image to function
    cap_add:
      - net_admin
    environment:
      - TZ=${TZ}
    command: -d
    # if using '-d' or 'DNS' you can't enable the `read_only: true` option
    read_only: false
    tmpfs:
      - /run
      - /tmp
    restart: unless-stopped
    security_opt:
      - label:disable
    stdin_open: true
    tty: true
    volumes:
      - /dev/net:/dev/net:z
      - {{ container_data_path }}/vpn:/vpn
    # Put .ovpn configuration file in the /vpn directory (in "volumes:" above or
    # launch using the command line arguments, IE pick one:
    #  - ./vpn:/vpn
    # command: 'server;user;password[;port]'
    ports:
      - 6881:6881
      - 6881:6881/udp
    networks:
      - proxies
    security_opt:
      - no-new-privileges:true

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent
    container_name: qbittorrent
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=8080
    volumes:
      - {{ container_data_path }}/qbittorrent:/config
      - {{ media_data_path }}:/data
    network_mode: "service:vpn"
    depends_on:
      - vpn
    security_opt:
      - no-new-privileges:true

  jackett:
    image: lscr.io/linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - AUTO_UPDATE=true #optional
    volumes:
      - {{ container_data_path }}/jackett:/config
    restart: unless-stopped
    networks:
      - proxies
    security_opt:
      - no-new-privileges:true

  plex:
    image: linuxserver/plex
    container_name: plex
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - VERSION=latest
    volumes:
      - '{{ container_data_path }}/plex/config:/config'
      - '{{ media_data_path }}:/data'
      - '{{ container_data_path }}/plex/transcode:/transcode'
    network_mode: host
    security_opt:
      - no-new-privileges:true


  # nginx:
  #   image: nginx
  #   container_name: nginx
  #   restart: unless-stopped
  #   ports:
  #     - '80:80'
  #     - '443:443'
  #   volumes:
  #     - '{{ container_data_path }}/nginx/html:/etc/nginx/html'
  #     - '{{ container_data_path }}/nginx/config:/etc/nginx'
  #     - '{{ container_data_path }}/certbot/conf:/etc/letsencrypt'
  #     - '{{ container_data_path }}/certbot/www:/var/www/certbot'
  #   command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  #   networks:
  #     - proxies
  #   security_opt:
  #     - no-new-privileges:true

  muximux:
    image: linuxserver/muximux
    container_name: muximux
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - '{{ container_data_path }}/muximux:/config'
    networks:
      - proxies
    security_opt:
      - no-new-privileges:true

  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    restart: unless-stopped
    environment:
        - PUID=${PUID}
        - PGID=${PGID}
        - TZ=${TZ}
    volumes:
      - '{{ container_data_path }}/tautulli:/config'
      - '{{ container_data_path }}/plex/config/Library/Application Support/Plex Media Server/Logs/:/logs'
    networks:
      - proxies
    security_opt:
      - no-new-privileges:true

  beets:
    image: linuxserver/beets
    container_name: beets
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - '{{ container_data_path }}/beets:/config'
      - '{{ media_data_path }}/Music:/music'
    networks:
      - isolated
    security_opt:
      - no-new-privileges:true

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - '{{ container_data_path }}/certbot/conf:/etc/letsencrypt'
      - '{{ container_data_path }}/certbot/www:/var/www/certbot'
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - isolated
    security_opt:
      - no-new-privileges:true

  anime-sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: anime-sonarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - '{{ container_data_path }}/anime-sonarr:/config'
      - '{{ media_data_path }}:/data'
    networks:
      - proxies
    security_opt:
      - no-new-privileges:true

  tv-sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: tv-sonarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - '{{ container_data_path }}/tv-sonarr:/config'
      - '{{ media_data_path }}:/data'
    networks:
      - proxies
    security_opt:
      - no-new-privileges:true

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - '{{ container_data_path }}/radarr:/config'
      - '{{ media_data_path }}:/data'
    networks:
      - proxies
    security_opt:
      - no-new-privileges:true
