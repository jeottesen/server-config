# {{ ansible_managed }}

version: "3.8"

services:

  vpn:
    image: dperson/openvpn-client
    container_name: vpn
    # cap_add, security_opt, and volume required for the image to function
    cap_add:
      - net_admin
    environment:
      - TZ=${TZ}
    command: -d
    # if using '-d' or 'DNS' you can't enable the `read_only: true` option
    read_only: false
    tmpfs:
      - /run
      - /tmp
    restart: unless-stopped
    security_opt:
      - label:disable
    stdin_open: true
    tty: true
    volumes:
      - /dev/net:/dev/net:z
      - {{ container_data_path }}/vpn:/vpn
    # Put .ovpn configuration file in the /vpn directory (in "volumes:" above or
    # launch using the command line arguments, IE pick one:
    #  - ./vpn:/vpn
    # command: 'server;user;password[;port]'
    ports:
      - 6881:6881
      - 6881:6881/udp
    networks:
      - proxies

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent
    container_name: qbittorrent
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=8080
    volumes:
      - {{ container_data_path }}/qbittorrent:/config
      - {{ plex_data_path }}:/data
    network_mode: "service:vpn"
    depends_on:
      - vpn

  jackett:
    image: lscr.io/linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - AUTO_UPDATE=true #optional
    volumes:
      - {{ container_data_path }}/jackett:/config
    restart: unless-stopped
    networks:
      - proxies

  plex:
    image: linuxserver/plex
    container_name: plex
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - VERSION=latest
    volumes:
      - '{{ container_data_path }}/plex/config:/config'
      - '{{ plex_data_path }}:/data'
      - '{{ container_data_path }}/plex/transcode:/transcode'
    network_mode: host


  nginx:
    image: nginx
    container_name: nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - '{{ container_data_path }}/nginx/html:/etc/nginx/html'
      - '{{ container_data_path }}/nginx/config:/etc/nginx'
      - '{{ container_data_path }}/certbot/conf:/etc/letsencrypt'
      - '{{ container_data_path }}/certbot/www:/var/www/certbot'
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - proxies

  muximux:
    image: linuxserver/muximux
    container_name: muximux
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - '{{ container_data_path }}/muximux:/config'
    networks:
      - proxies

  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    restart: unless-stopped
    environment:
        - PUID=${PUID}
        - PGID=${PGID}
        - TZ=${TZ}
    volumes:
      - '{{ container_data_path }}/tautulli:/config'
      - '{{ container_data_path }}/plex/config/Library/Application Support/Plex Media Server/Logs/:/logs'
    networks:
      - proxies

  beets:
    image: linuxserver/beets
    container_name: beets
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - '{{ container_data_path }}/beets:/config'
      - '{{ container_data_path }}/Music:/music'
    networks:
      - isolated

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - '{{ container_data_path }}/certbot/conf:/etc/letsencrypt'
      - '{{ container_data_path }}/certbot/www:/var/www/certbot'
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - isolated

  anime-sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: anime-sonarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - '{{ container_data_path }}/anime-sonarr:/config'
      - '{{ plex_data_path }}:/data'
    networks:
      - proxies

  tv-sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: tv-sonarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - '{{ container_data_path }}/tv-sonarr:/config'
      - '{{ plex_data_path }}:/data'
    networks:
      - proxies

networks:
  proxies:
    # Containers part of the reverse proxy system
    driver: bridge
  isolated:
    # Containers not part of the reverse proxy system
    driver: bridge
