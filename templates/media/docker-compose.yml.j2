# {{ ansible_managed }}
networks:
  # Containers part of the reverse proxy system
  swarm_proxies:
    driver: bridge
    attachable: true
    ipam:
      config:
        - subnet: 10.10.10.0/24

  # network for the docker socket
  socket_proxy:
    driver: bridge
    attachable: true
    #ipam:
    #  config:
    #    - subnet: 192.168.91.0/24

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections
# More Info on how to use this: https://github.com/htpcBeginner/docker-traefik/pull/228

# Common environment values
x-default-environment: &default-tz-puid-pgid
  TZ: $TZ
  USER_ID:  0
  GROUP_ID: 0
  PUID: 0
  PGID: 0

x-primary-environment: &primary-tz-puid-pgid
  TZ: $TZ
  USER_ID:  $PUID
  GROUP_ID: $PGID
  PUID: $PUID
  PGID: $PGID

# Proxy Network and Security
x-network: &network
  networks:
    - swarm_proxies

x-network-vpn: &network-vpn
  network_mode: "service:wireguard"
  depends_on:
    - wireguard

x-security: &security
  security_opt:
    - no-new-privileges:true

# Keys common to some of the services
x-common-keys-core: &common-keys-core
  <<: [*network, *security]

x-common-keys-core-vpn: &common-keys-core-vpn
  <<: [*network-vpn, *security]

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  <<: [*network, *security]

x-common-keys-apps-vpn: &common-keys-apps-vpn
  <<: [*network-vpn, *security]

services:

########################### Core Services

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    networks:
      - socket_proxy
    #  socket_proxy:
    #    ipv4_address: 192.168.91.254 # You can specify a static IP
    privileged: true
    #ports:
    # - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=0 # Portainer
      - INFO=0 # Portainer
      - NETWORKS=0 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=0 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=0 # Portainer
      - VOLUMES=0 # Portainer

{# # Traefik v3 - Reverse Proxy
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: media_traefik
    image: traefik:3.1
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      # - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      # - --entryPoints.ping.address=:8081
      - --api=true
      - --api.insecure=false
      - --api.dashboard=true
      #- --ping=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      # Automatically set Host rule for services
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-basic-auth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add route53 as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=route53
      # - --entrypoints.https.http.tls.domains[0].main=$DOMAIN_NAME
      # - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAIN_NAME
      # - --providers.docker.network=docker_proxies
      - --providers.swarm.exposedByDefault=false
      - --providers.swarm.network=swarm_proxies
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --certificatesResolvers.route53.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.route53.acme.email=$EMAIL_ADDRESS
      - --certificatesResolvers.route53.acme.storage=/acme.json
      - --certificatesResolvers.route53.acme.dnsChallenge.provider=route53
      - --certificatesResolvers.route53.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      swarm_proxies:
          ipv4_address: 10.10.10.201
      socket_proxy:
    #healthcheck:
    #  test: ["CMD", "traefik", "healthcheck", "--ping"]
    #  interval: 5s
    #  retries: 3
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      # - target: 8080
      #  published: 8080
      #  protocol: tcp
      #  mode: host
    #secrets:
       #- htpasswd
    volumes:
      - $CONTAINER_APPDATA_DIR/traefik/rules:/rules # file provider directory
      - $CONTAINER_APPDATA_DIR/traefik/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $CONTAINER_APPDATA_DIR/traefik/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
      - $CONTAINER_APPDATA_DIR/traefik/plugins-local:/plugins-local # traefik plugins
    environment:
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      AWS_REGION: $AWS_REGION
      AWS_HOSTED_ZONE_ID: $AWS_HOSTED_ZONE_ID
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=chain-redirect@file"
      #- "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAIN_NAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=route53"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAIN_NAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAIN_NAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Healthcheck/ping
      #- "traefik.http.routers.ping.rule=Host(`traefik.$DOMAIN_NAME`) && Path(`/ping`)"
      #- "traefik.http.routers.ping.tls=true"
      #- "traefik.http.routers.ping.service=ping@internal"
      ## Middlewares
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-no-auth@file" # For No Authentication
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-auth-basic@file" # For Basic HTTP Authentication      
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file" # For Google OAuth
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file" # For Authelia Authentication #}

{# ############################# Media

  plex:
    restart: always
    network_mode: host
    security_opt:
      - no-new-privileges:true
    image: linuxserver/plex
    container_name: plex
    runtime: nvidia
    environment:
      <<: *primary-tz-puid-pgid
      VERSION: latest
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
    volumes:
      - '$PLEX_DIR/config:/config'
      - '$PLEX_DIR/transcode:/transcode'
      - '$DATA_DIR:/data'
    labels:
      - "com.centurylinklabs.watchtower.enable=true" 

  plexautolanguages:
    <<: *common-keys-apps
    image: remirigal/plex-auto-languages:latest
    container_name: plexautolanguages
    environment:
      <<: *default-tz-puid-pgid
      PLEX_URL: "http://$PLEX_IP:32400"
      PLEX_TOKEN: $PLEX_TOKEN
    volumes:
      - '$CONTAINER_APPDATA_DIR/plexautolanguages:/config'

  tautulli:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: linuxserver/tautulli
    container_name: tautulli
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - '$CONTAINER_APPDATA_DIR/tautulli:/config'
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181" #}

  ############################# Game Servers

  {# # Foundry VTT - A server for TTRPGS
  foundry:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: felddy/foundryvtt:release
    container_name: foundry
    volumes:
      - $CONTAINER_APPDATA_DIR/foundry:/data
    environment:
      FOUNDRY_UID: $PUID
      FOUNDRY_GID: $PGID
      TIMEZONE: $TZ
      FOUNDRY_HOSTNAME: "foundry.$DOMAIN_NAME"
      #FOUNDRY_PROXY_PORT: 443
      FOUNDRY_PROXY_SSL: "true"
      FOUNDRY_MINIFY_STATIC_FILES: "true"
    secrets:
      - source: foundry_config
        target: config.json
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.foundry-rtr.entrypoints=https"
      - "traefik.http.routers.foundry-rtr.rule=Host(`foundry.$DOMAIN_NAME`)"
      - "traefik.http.routers.foundry-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.foundry-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.foundry-rtr.service=foundry-svc"
      - "traefik.http.services.foundry-svc.loadbalancer.server.port=30000" #}

  {# # Crafty Controller - Minecraft server manager
  crafty-web:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: registry.gitlab.com/crafty-controller/crafty-4:latest
    container_name: crafty
    environment:
      <<: *primary-tz-puid-pgid
    ports:
      - "8123:8123" # DYNMAP
      - "19132:19132/udp" # BEDROCK
      - "25500-25600:25500-25600" # MC SERV PORT RANGE
    volumes:
      - "$USER_DIR/minecraft/backups:/crafty/backups"
      - "$USER_DIR/minecraft/logs:/crafty/logs"
      - "$USER_DIR/minecraft/servers:/crafty/servers"
      - "$USER_DIR/minecraft/config:/crafty/app/config"
      - "$USER_DIR/minecraft/import:/crafty/import"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.crafty-rtr.entrypoints=https"
      - "traefik.http.routers.crafty-rtr.rule=Host(`crafty.$DOMAIN_NAME`)"
      - "traefik.http.routers.crafty-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.crafty-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.crafty-rtr.service=crafty-svc"
      - "traefik.http.services.crafty-svc.loadbalancer.server.scheme=https"
      - "traefik.http.services.crafty-svc.loadbalancer.server.port=8443"
      - "traefik.http.services.crafty-svc.loadbalancer.serversTransport=isv-transport@file" #}

  {# # Don't Starve Server - server for Don't Starve Together
  dst-server:
    image: jamesits/dst-server:latest
    container_name: dst-server
    profiles:
      - donotstart
    environment:
      <<: *default-tz-puid-pgid
    ports:
      - "10999-11000:10999-11000/udp"
      - "12346-12347:12346-12347/udp"
    volumes:
      - "$CONTAINER_APPDATA_DIR/dst-server/:/data:rw" #}

  factorio-one:
    image: factoriotools/factorio:stable
    container_name: factorio-one
    environment:
      <<: *primary-tz-puid-pgid
    ports:
      - "34197:34197/udp"
      # - "27015:27015/tcp" # RCON
    volumes:
      - "$USER_DIR/factorio-one/:/factorio"
    labels:
      - "com.centurylinklabs.watchtower.enable=true" 

  factorio-two:
    image: factoriotools/factorio:stable
    container_name: factorio-two
    environment:
      <<: *primary-tz-puid-pgid
    ports:
      - "34198:34197/udp"
      # - "27016:27015/tcp" # RCON
    volumes:
      - "$USER_DIR/factorio-two/:/factorio"
    labels:
      - "com.centurylinklabs.watchtower.enable=true" 

  ############################# MAINTENANCE

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    networks:
      - socket_proxy
    environment:
      TZ: $TZ
      DOCKER_HOST: "tcp://media_socket-proxy:2375"
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_REVIVE_STOPPED: "true"
      WATCHTOWER_LOG_LEVEL: "info"
      WATCHTOWER_POLL_INTERVAL: "3600" # Check for updates every hour
      WATCHTOWER_TIMEOUT: "60s"
      