# {{ ansible_managed }}
networks:
  # Containers part of the reverse proxy system
  proxies:
    driver: bridge
    ipam:
      config:
        - subnet: 10.17.100.0/24

  # network for the docker socket
  socket_proxy:
    driver: bridge
    #ipam:
    #  config:
    #    - subnet: 192.168.91.0/24
  rustdesk-net:
    external: false

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections
# More Info on how to use this: https://github.com/htpcBeginner/docker-traefik/pull/228

# Common environment values
x-default-environment: &default-tz-puid-pgid
  TZ: $TZ
  USER_ID:  0
  GROUP_ID: 0
  PUID: 0
  PGID: 0

x-primary-environment: &primary-tz-puid-pgid
  TZ: $TZ
  USER_ID:  $PUID
  GROUP_ID: $PGID
  PUID: $PUID
  PGID: $PGID

# Proxy Network and Security
x-network: &network
  networks:
    - proxies

x-network-vpn: &network-vpn
  network_mode: "service:wireguard"
  depends_on:
    - wireguard

x-security: &security
  security_opt:
    - no-new-privileges:true

# Keys common to some of the services
x-common-keys-core: &common-keys-core
  <<: [*network, *security]
  restart: always

x-common-keys-core-vpn: &common-keys-core-vpn
  <<: [*network-vpn, *security]
  restart: always

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  <<: [*network, *security]
  restart: unless-stopped

x-common-keys-apps-vpn: &common-keys-apps-vpn
  <<: [*network-vpn, *security]
  restart: unless-stopped

services:

########################### Core Services

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    networks:
      - socket_proxy
    #  socket_proxy:
    #    ipv4_address: 192.168.91.254 # You can specify a static IP
    privileged: true
    #ports:
    # - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=0 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=0 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=0 # Portainer
      - VOLUMES=1 # Portainer

  # Traefik 3 - Reverse Proxy
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: traefik
    image: traefik:3.3
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.traefik.address=:8080
      - --entrypoints.websecure.http3=true
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      # - --entrypoints.websecure.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --api=true
      - --api.dashboard=true
      - --api.insecure=false
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=docker_proxies
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.options=tls-opts@file
      # Add route53 as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.websecure.http.tls.certresolver=dns-route53
      - --entrypoints.websecure.http.tls.domains[0].main=$DOMAIN_NAME
      - --entrypoints.websecure.http.tls.domains[0].sans=*.$DOMAIN_NAME
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
      #- --certificatesResolvers.dns-route53.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-route53.acme.email=$EMAIL_ADDRESS
      - --certificatesResolvers.dns-route53.acme.storage=/acme.json
      - --certificatesResolvers.dns-route53.acme.dnsChallenge.provider=route53
      - --certificatesResolvers.dns-route53.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-route53.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      proxies:
          ipv4_address: 10.17.100.200
      socket_proxy:
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      # - target: 8080
      #  published: 8080
      #  protocol: tcp
      #  mode: host
    #secrets:
       #- htpasswd
    volumes:
      - $CONTAINER_APPDATA_DIR/traefik/rules:/rules # file provider directory
      - $CONTAINER_APPDATA_DIR/traefik/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $CONTAINER_APPDATA_DIR/traefik/logs:/logs # log directory for traefik and access logs
      - $CONTAINER_APPDATA_DIR/traefik/plugins-local:/plugins-local # traefik plugins
    environment:
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      AWS_REGION: $AWS_REGION
      AWS_HOSTED_ZONE_ID: $AWS_HOSTED_ZONE_ID
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=websecure"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAIN_NAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-route53"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAIN_NAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAIN_NAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-no-auth@file" # For No Authentication
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-auth-basic@file" # For Basic HTTP Authentication      
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file" # For Google OAuth
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file" # For Authelia Authentication

  # Google OAuth - Single Sign On using OAuth 2.0
  oauth:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: ghcr.io/jordemort/traefik-forward-auth:latest
    container_name: oauth
    environment:
      PROVIDERS_GOOGLE_CLIENT_ID: "{{ oauth_client_id }}"
      PROVIDERS_GOOGLE_CLIENT_SECRET: "{{ oauth_client_secret }}"
      SECRET: "{{ forward_auth_secret }}"
      COOKIE_DOMAIN: $DOMAIN_NAME
      AUTH_HOST: oauth.$DOMAIN_NAME
      LIFETIME: 86400 # 1 day
      INSECURE_COOKIE: "false"
      LOG_LEVEL: info
      WHITELIST: "{% for email in oauth_whitelist %}{{ email }},{% endfor %}{{ admin_email_address }}"
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.entrypoints=websecure"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAIN_NAME`)"
      # Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      # HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"
  
  ddns-route53:
    image: crazymax/ddns-route53:latest
    container_name: ddns-route53
    <<: *common-keys-core
    environment:
      <<: *default-tz-puid-pgid
      SCHEDULE: "*/30 * * * *"
      LOG_LEVEL: info
      LOG_JSON: "false"
      DDNSR53_CREDENTIALS_ACCESSKEYID: $AWS_ACCESS_KEY_ID
      DDNSR53_CREDENTIALS_SECRETACCESSKEY: $AWS_SECRET_ACCESS_KEY
      DDNSR53_ROUTE53_HOSTEDZONEID: $AWS_HOSTED_ZONE_ID
      DDNSR53_ROUTE53_RECORDSSET_0_NAME: $DOMAIN_NAME
      DDNSR53_ROUTE53_RECORDSSET_0_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_0_TTL: 300
{% for sub in sub_domains %}
      DDNSR53_ROUTE53_RECORDSSET_{{ loop.index }}_NAME: "{{ sub }}.$DOMAIN_NAME"
      DDNSR53_ROUTE53_RECORDSSET_{{ loop.index }}_TYPE: A
      DDNSR53_ROUTE53_RECORDSSET_{{ loop.index }}_TTL: 300
{% endfor %}

  {# # Traefik Whoami - a simple page to help debug headers and routing
  whoami:
    <<: *common-keys-apps
    image: "traefik/whoami"
    container_name: "whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami-login-rtr.entrypoints=https"
      - "traefik.http.routers.whoami-login-rtr.rule=Host(`whoami.$DOMAIN_NAME`)"
      - "traefik.http.routers.whoami-rtr.entrypoints=https"
      - "traefik.http.routers.whoami-rtr.rule=Host(`whoami.$DOMAIN_NAME`) && {{ allow_admin_rule }}"
      ## Middlewares
      - "traefik.http.routers.whoami-login-rtr.middlewares=chain-oauth@file,back-to-home@file"
      - "traefik.http.routers.whoami-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.whoami-rtr.service=whoami-svc"
      - "traefik.http.services.whoami-svc.loadbalancer.server.port=80" #}

  {# # Autoindex - Simple Directory Index
  autoindex:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: autoindex
    image: dceoy/nginx-autoindex:latest
    # ports:
    #   - "$AUTOINDEX_PORT:80"
    volumes:
      - $USER_DIR/index:/var/lib/nginx/html:ro # Location you want to index
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.autoindex-rtr.entrypoints=https"
      - "traefik.http.routers.autoindex-rtr.rule=Host(`index.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.autoindex-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.autoindex-rtr.service=autoindex-svc"
      - "traefik.http.services.autoindex-svc.loadbalancer.server.port=80" #}

  # Organizr - Unified Frontend
  organizr:
    <<: *common-keys-core
    container_name: organizr
    image: organizr/organizr
#    ports:
#      - "$ORGANIZR_PORT:80"
    volumes:
      - $CONTAINER_APPDATA_DIR/organizr:/config
    environment:
      <<: *primary-tz-puid-pgid
      fpm: "true" #true or false | using true will provide better performance
      branch: v2-master #v2-master or #v2-develop
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.organizr-rtr.entrypoints=websecure"
      - "traefik.http.routers.organizr-rtr.rule=Host(`$DOMAIN_NAME`) || Host(`www.$DOMAIN_NAME`) || Host(`login.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.organizr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"

  unifi-controller:
    <<: *common-keys-core
    image: lscr.io/linuxserver/unifi-controller
    container_name: unifi-controller
    environment:
      <<: *default-tz-puid-pgid
      MEM_LIMIT: 1024 #optional
      MEM_STARTUP: 1024 #optional
    volumes:
      - $CONTAINER_APPDATA_DIR/unifi:/config
    ports:
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 8443:8443
      #- 1900:1900/udp #optional
      - 8843:8843 #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514/udp #optional
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.unifi-rtr.tls=true"
      - "traefik.http.routers.unifi-rtr.entrypoints=websecure"
      - "traefik.http.routers.unifi-rtr.rule=Host(`unifi.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.unifi-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.unifi-rtr.service=unifi-svc"
      - "traefik.http.services.unifi-svc.loadbalancer.passHostHeader=true"
      - "traefik.http.services.unifi-svc.loadbalancer.server.scheme=https"
      - "traefik.http.services.unifi-svc.loadbalancer.server.port=8443"
      - "traefik.http.services.unifi-svc.loadbalancer.serversTransport=isv-transport@file"

  # Speedtest tracker - Runs a speedtest check every hour and graphs the results
  speedtest-tracker:
    <<: *common-keys-core
    container_name: speedtest-tracker
    image: lscr.io/linuxserver/speedtest-tracker:latest
    volumes:
      - $CONTAINER_APPDATA_DIR/speedtest:/config
    environment:
      <<: *primary-tz-puid-pgid
      DB_CONNECTION: "sqlite"
      PUBLIC_DASHBOARD: "true"
      SPEEDTEST_SCHEDULE: "0 0,12 * * *"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.speedtest-rtr.entrypoints=websecure"
      - "traefik.http.routers.speedtest-rtr.rule=Host(`speedtest.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.speedtest-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.speedtest-rtr.service=speedtest-svc"
      - "traefik.http.services.speedtest-svc.loadbalancer.server.scheme=https"
      - "traefik.http.services.speedtest-svc.loadbalancer.server.port=443"
      - "traefik.http.services.speedtest-svc.loadbalancer.serversTransport=isv-transport@file"

  ############################# Downloaders

  # Wireguard - VPN Client for other services
  # Command to test if connected: docker exec -it qbittorrent curl -w "\n" ifconfig.me
  wireguard:
    <<: *security
    restart: always
    image: ghcr.io/linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - $CONTAINER_APPDATA_DIR/wireguard:/config
      - /lib/modules:/lib/modules
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    # Traefik routers must be connected to this service in order to route correctly
    networks:
      proxies:
        ipv4_address: 10.17.100.100
    labels:
      - "traefik.enable=true"

      ### Public QBittorent Routers
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.qbt-public-rtr-bypass.entrypoints=websecure"
      - "traefik.http.routers.qbt-public-rtr-bypass.rule=Host(`qbt.public.$DOMAIN_NAME`) && Header(`Traefik-Auth-Key`, `$TRAEFIK_AUTH_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.qbt-public-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.qbt-public-rtr.entrypoints=websecure"
      - "traefik.http.routers.qbt-public-rtr.rule=Host(`qbt.public.$DOMAIN_NAME`)"
      - "traefik.http.routers.qbt-public-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.qbt-public-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.qbt-public-rtr-bypass.service=qbt-public-svc"
      - "traefik.http.routers.qbt-public-rtr.service=qbt-public-svc"
      - "traefik.http.services.qbt-public-svc.loadbalancer.server.port=8080"

      ### Private QBittorent Routers
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.qbt-private-rtr-bypass.entrypoints=websecure"
      - "traefik.http.routers.qbt-private-rtr-bypass.rule=Host(`qbt.private.$DOMAIN_NAME`) && Header(`Traefik-Auth-Key`, `$TRAEFIK_AUTH_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.qbt-private-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.qbt-private-rtr.entrypoints=websecure"
      - "traefik.http.routers.qbt-private-rtr.rule=Host(`qbt.private.$DOMAIN_NAME`)"
      - "traefik.http.routers.qbt-private-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.qbt-private-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.qbt-private-rtr-bypass.service=qbt-private-svc"
      - "traefik.http.routers.qbt-private-rtr.service=qbt-private-svc"
      - "traefik.http.services.qbt-private-svc.loadbalancer.server.port=8081"

      ### Books QBittorent Routers
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.qbt-books-rtr-bypass.entrypoints=websecure"
      - "traefik.http.routers.qbt-books-rtr-bypass.rule=Host(`qbt.books.$DOMAIN_NAME`) && Header(`Traefik-Auth-Key`, `$TRAEFIK_AUTH_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.qbt-books-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.qbt-books-rtr.entrypoints=websecure"
      - "traefik.http.routers.qbt-books-rtr.rule=Host(`qbt.books.$DOMAIN_NAME`)"
      - "traefik.http.routers.qbt-books-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.qbt-books-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.qbt-books-rtr-bypass.service=qbt-books-svc"
      - "traefik.http.routers.qbt-books-rtr.service=qbt-books-svc"
      - "traefik.http.services.qbt-books-svc.loadbalancer.server.port=8082"

      ### TV Sonarr Routers
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=websecure"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAIN_NAME`) && Header(`Traefik-Auth-Key`, `$TRAEFIK_AUTH_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.sonarr-rtr.entrypoints=websecure"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAIN_NAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"

      ### Radarr Routers
      # HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=websecure"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$DOMAIN_NAME`) && Header(`Traefik-Auth-Key`, `$TRAEFIK_AUTH_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.radarr-rtr.entrypoints=websecure"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAIN_NAME`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"
      
      ### Readarr Routers
      # HTTP Routers Auth Bypass
      - "traefik.http.routers.readarr-rtr-bypass.entrypoints=websecure"
      - "traefik.http.routers.readarr-rtr-bypass.rule=Host(`readarr.$DOMAIN_NAME`) && Header(`Traefik-Auth-Key`, `$TRAEFIK_AUTH_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.readarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.readarr-rtr.entrypoints=websecure"
      - "traefik.http.routers.readarr-rtr.rule=Host(`readarr.$DOMAIN_NAME`)"
      - "traefik.http.routers.readarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.readarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.readarr-rtr-bypass.service=readarr-svc"
      - "traefik.http.routers.readarr-rtr.service=readarr-svc"
      - "traefik.http.services.readarr-svc.loadbalancer.server.port=8787"

      ### Prowlarr Routers
      ## HTTP Routers
      - "traefik.http.routers.prowlarr-login-rtr.entrypoints=websecure"
      - "traefik.http.routers.prowlarr-login-rtr.rule=Host(`prowlarr.$DOMAIN_NAME`)"
      - "traefik.http.routers.prowlarr-rtr.entrypoints=websecure"
      - "traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.$DOMAIN_NAME`) && {{ allow_admin_rule }}"
      ## Middlewares
      - "traefik.http.routers.prowlarr-login-rtr.middlewares=chain-oauth@file,back-to-home@file"
      - "traefik.http.routers.prowlarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.prowlarr-login-rtr.service=oauth-svc"
      - "traefik.http.routers.prowlarr-rtr.service=prowlarr-svc"
      - "traefik.http.services.prowlarr-svc.loadbalancer.server.port=9696"

  qbt-public:
    <<: *common-keys-apps-vpn
    image: lscr.io/linuxserver/qbittorrent
    container_name: qbt-public
    environment:
      <<: *primary-tz-puid-pgid
      WEBUI_PORT: 8080
    volumes:
      - $CONTAINER_APPDATA_DIR/qbt-public:/config
      - $DATA_DIR/Torrents/public:$DATA_DIR/Torrents/public
    deploy:
      resources:
          limits:
            cpus: "0.50"
            memory: 4096M
    # traefik labels under wireguard

  qbt-private:
    <<: *common-keys-apps-vpn
    image: lscr.io/linuxserver/qbittorrent
    container_name: qbt-private
    environment:
      <<: *primary-tz-puid-pgid
      WEBUI_PORT: 8081
    volumes:
      - $CONTAINER_APPDATA_DIR/qbt-private:/config
      - $DATA_DIR/Torrents/private:$DATA_DIR/Torrents/private
    deploy:
      resources:
          limits:
            cpus: "0.50"
            memory: 2048M
    # traefik labels under wireguard

  qbt-books:
    <<: *common-keys-apps-vpn
    image: lscr.io/linuxserver/qbittorrent
    container_name: qbt-books
    environment:
      <<: *primary-tz-puid-pgid
      WEBUI_PORT: 8082
    volumes:
      - $CONTAINER_APPDATA_DIR/qbt-books:/config
      - $DATA_DIR/Torrents/books:$DATA_DIR/Torrents/books
    deploy:
      resources:
          limits:
            cpus: "0.50"
            memory: 2048M
    # traefik labels under wireguard

  prowlarr:
    <<: *common-keys-apps-vpn # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      <<: *primary-tz-puid-pgid
    volumes:
      - $CONTAINER_APPDATA_DIR/prowlarr:/config
    # traefik labels under wireguard

  ############################# Media

  plexautolanguages:
    <<: *common-keys-apps
    image: remirigal/plex-auto-languages:latest
    container_name: plexautolanguages
    environment:
      <<: *default-tz-puid-pgid
      PLEX_URL: "http://$PLEX_IP:32400"
      PLEX_TOKEN: $PLEX_TOKEN
    volumes:
      - '$CONTAINER_APPDATA_DIR/plexautolanguages:/config'

  tautulli:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - '$CONTAINER_APPDATA_DIR/tautulli:/config'
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=websecure"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"

  #TODO Replace with Lidarr
  {# beets:
    image: linuxserver/beets
    container_name: beets
    restart: unless-stopped
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - '$CONTAINER_APPDATA_DIR/beets:/config'
      - '$DATA_DIR/Music:/music'
    networks:
      - isolated
    security_opt:
      - no-new-privileges:true #}

  recyclarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: recyclarr/recyclarr
    container_name: recyclarr
    user: '0:0'
    volumes:
      - $CONTAINER_APPDATA_DIR/recyclarr:/config

  sonarr:
    <<: *common-keys-apps-vpn # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      <<: *primary-tz-puid-pgid
    volumes:
      - '$CONTAINER_APPDATA_DIR/sonarr:/config'
      - '$DATA_DIR:/data'
      - "/etc/localtime:/etc/localtime:ro"
      #Traefik labels under wireguard

  radarr:
    <<: *common-keys-apps-vpn # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      <<: *primary-tz-puid-pgid
    volumes:
      - '$CONTAINER_APPDATA_DIR/radarr:/config'
      - '$DATA_DIR:/data'
      - "/etc/localtime:/etc/localtime:ro"
      #Traefik labels under wireguard

  # Readarr - Books management
  # Set url_base in readarr settings if using PathPrefix
  readarr:
    <<: *common-keys-apps-vpn # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      <<: *primary-tz-puid-pgid
    volumes:
      - $CONTAINER_APPDATA_DIR/readarr:/config
      - $DATA_DIR:/data
      - "/etc/localtime:/etc/localtime:ro"
    #Traefik labels under wireguard

  # Overseer - Request management for Plex
  overseerr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      <<: *primary-tz-puid-pgid
    volumes:
      - $CONTAINER_APPDATA_DIR/overseerr:/config
          ### Overseer Routers
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.overseerr-rtr-bypass.entrypoints=websecure"
      - "traefik.http.routers.overseerr-rtr-bypass.rule=Host(`overseerr.$DOMAIN_NAME`) && Header(`Traefik-Auth-Key`, `$TRAEFIK_AUTH_KEY`)" # Bypass Auth for mobile apps
      - "traefik.http.routers.overseerr-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.overseerr-rtr.entrypoints=websecure"
      - "traefik.http.routers.overseerr-rtr.rule=Host(`overseerr.$DOMAIN_NAME`)"
      - "traefik.http.routers.overseerr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.overseerr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.overseerr-rtr-bypass.service=overseerr-svc"
      - "traefik.http.routers.overseerr-rtr.service=overseerr-svc"
      - "traefik.http.services.overseerr-svc.loadbalancer.server.port=5055"

  {# # Lidarr - Music Management
  # Set url_base in lidarr settings if using PathPrefix
  lidarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    #ports:
    #  - "$LIDARR_PORT:8686"
    volumes:
      - $CONTAINER_APPDATA_DIR/lidarr:/config
      - $DATA_DIR:/data
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      #- "traefik.http.routers.lidarr-rtr-bypass.entrypoints=https"
      #- "traefik.http.routers.lidarr-rtr-bypass.rule=Host(`lidarr.$DOMAIN_NAME`) && (Header(`X-Api-Key`, `$LIDARR_API_KEY`) || Query(`apikey`, `$LIDARR_API_KEY`))"
      #- "traefik.http.routers.lidarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.lidarr-rtr.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr.rule=Host(`lidarr.$DOMAIN_NAME`)"
      - "traefik.http.routers.lidarr-rtr.priority=99"
      ## Middlewares
      #- "traefik.http.routers.lidarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.lidarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.lidarr-rtr.service=lidarr-svc"
      #- "traefik.http.routers.lidarr-rtr-bypass.service=lidarr-svc"
      - "traefik.http.services.lidarr-svc.loadbalancer.server.port=8686" #}
 
  unpackerr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: golift/unpackerr
    container_name: unpackerr
    volumes:
      # You need at least this one volume mapped so Unpackerr can find your files to extract.
      # Make sure this matches your Starr apps; the folder mount (/downloads or /data) should be identical.
      - $CONTAINER_APPDATA_DIR/unpackerr:/config
      - $DATA_DIR:/data
    user: '$PUID:$PGID'
    # What you see below are defaults for this compose. You only need to modify things specific to your environment.
    # Remove apps and feature configs you do not use or need. 
    # ie. Remove all lines that begin with UN_CMDHOOK, UN_WEBHOOK, UN_FOLDER, UN_WEBSERVER, and other apps you do not use.
    environment:
      <<: *primary-tz-puid-pgid
      # General config
      UN_DEBUG: 'false'
      UN_LOG_FILES: '10'
      UN_LOG_FILE_MB: '10'
      UN_INTERVAL: '2m'
      UN_START_DELAY: '1m'
      UN_RETRY_DELAY: '5m'
      UN_MAX_RETRIES: '3'
      UN_PARALLEL: '1'
      UN_FILE_MODE: '0666'
      UN_DIR_MODE: '0777'
      # Sonarr Config
      UN_SONARR_0_URL: 'http://wireguard:8989'
      UN_SONARR_0_API_KEY: $SONARR_API_KEY
      UN_SONARR_0_PATHS_0: '/data/Torrents/private/complete/'
      UN_SONARR_0_PATHS_1: '/data/Torrents/public/complete/'
      UN_SONARR_0_PROTOCOLS: 'torrent'
      UN_SONARR_0_TIMEOUT: '10s'
      UN_SONARR_0_DELETE_ORIG: 'false'
      UN_SONARR_0_DELETE_DELAY: '480m'
      # Radarr Config
      UN_RADARR_0_URL: 'http://wireguard:7878'
      UN_RADARR_0_API_KEY: $RADARR_API_KEY
      UN_RADARR_0_PATHS_0: '/data/Torrents/private/complete/'
      UN_RADARR_0_PATHS_1: '/data/Torrents/public/complete/'
      UN_RADARR_0_PROTOCOLS: 'torrent'
      UN_RADARR_0_TIMEOUT: '10s'
      UN_RADARR_0_DELETE_ORIG: 'false'
      UN_RADARR_0_DELETE_DELAY: '480m'


  ############################# Utilites

  # File Browser - Explorer
  # The following commands need to be ran manually the first time.
  # touch filebrowser.db
  # chown $PUID:$PGID filebrowser/
  # For guest account with noauth
  # docker compose run filebrowser users update 1 --username=guest --perm.admin=false --perm.execute=false --perm.create=false --perm.rename=false --perm.modify=false --perm.delete=false -perm.share=false --lockPassword
  filebrowser:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: filebrowser/filebrowser
    container_name: filebrowser
    user: $PUID:$PGID
    volumes:
      - /data/:/srv/:ro
      - $CONTAINER_APPDATA_DIR/filebrowser/filebrowser.db:/database/filebrowser.db
      - $CONTAINER_APPDATA_DIR/filebrowser/.filebrowser.json:/.filebrowser.json
    environment:
      FB_NOAUTH: noauth
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.filebrowser-rtr.entrypoints=websecure"
      - "traefik.http.routers.filebrowser-rtr.rule=Host(`files.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.filebrowser-rtr.middlewares=chain-oauth@file" # ,default-guest-user"
      ## HTTP Services
      - "traefik.http.routers.filebrowser-rtr.service=filebrowser-svc"
      - "traefik.http.services.filebrowser-svc.loadbalancer.server.port=80"

  open-webui:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    volumes:
      - $CONTAINER_APPDATA_DIR/open-webui:/app/backend/data
    environment:
      WEBUI_AUTH_TRUSTED_EMAIL_HEADER: 'X-Forwarded-User'
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.open-webui-rtr.entrypoints=websecure"
      - "traefik.http.routers.open-webui-rtr.rule=Host(`ai.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.open-webui-rtr.middlewares=chain-oauth@file" 
      ## HTTP Services
      - "traefik.http.routers.open-webui-rtr.service=open-webui-svc"
      - "traefik.http.services.open-webui-svc.loadbalancer.server.port=8080"

  ombi:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/ombi:latest
    container_name: ombi
    environment:
      <<: *primary-tz-puid-pgid
    volumes:
      - $CONTAINER_APPDATA_DIR/ombi/config:/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.ombi-rtr.entrypoints=websecure"
      - "traefik.http.routers.ombi-rtr.rule=Host(`ombi.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.ombi-rtr.middlewares=chain-oauth@file" 
      ## HTTP Services
      - "traefik.http.routers.ombi-rtr.service=ombi-svc"
      - "traefik.http.services.ombi-svc.loadbalancer.server.port=3579"


  # Vaultwarden container
  vaultwarden:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: vaultwarden/server:latest
    container_name: vaultwarden
    user: 1000:1000
    volumes:
      - $CONTAINER_APPDATA_DIR/vaultwarden:/data
    environment:
      <<: *primary-tz-puid-pgid
      DOMAIN: "https://vault.cobaltcavern.com"
      SIGNUPS_ALLOWED: "false"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.vaultwarden-rtr.entrypoints=websecure"
      - "traefik.http.routers.vaultwarden-rtr.rule=Host(`vault.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.vaultwarden-rtr.middlewares=chain-no-auth@file" # Use vaultwardens authentication
      ## HTTP Services
      - "traefik.http.routers.vaultwarden-rtr.service=vaultwarden-svc"
      - "traefik.http.services.vaultwarden-svc.loadbalancer.server.port=80"

  syncthing:
    <<: *common-keys-apps
    image: syncthing/syncthing:latest
    container_name: syncthing
    hostname: cobalt-syncthing
    volumes:
      - $CONTAINER_APPDATA_DIR/syncthing:/var/syncthing
      - /data/Games/Emudeck/:/sync/emudeck
    user: 1000:1000
    environment:
      <<: *primary-tz-puid-pgid
    ports:
      - 22000:22000/tcp # TCP file transfers
      - 22000:22000/udp # QUIC file transfers
      #- 21027:21027/udp # Receive local discovery broadcasts
    restart: unless-stopped
    healthcheck:
      test: curl -fkLsS -m 2 127.0.0.1:8384/rest/noauth/health | grep -o --color=never OK || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.syncthing-rtr.entrypoints=websecure"
      - "traefik.http.routers.syncthing-rtr.rule=Host(`sync.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.syncthing-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.syncthing-rtr.service=syncthing-svc"
      - "traefik.http.services.syncthing-svc.loadbalancer.server.port=8384"

  # Zigbee2MQTT integration for Home Assistant 
  zigbee2mqtt:
    <<: *common-keys-apps
    image: ghcr.io/koenkk/zigbee2mqtt
    environment:
      <<: *primary-tz-puid-pgid
      ZIGBEE2MQTT_CONFIG_SERIAL_PORT: "tcp://192.168.50.6:6638"
      ZIGBEE2MQTT_CONFIG_MQTT_BASE_TOPIC: zigbee2mqtt
      ZIGBEE2MQTT_CONFIG_FRONTEND_ENABLED: true
    volumes:
      - $CONTAINER_APPDATA_DIR/zigbee2mqtt:/app/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.zigbee2mqtt-rtr.entrypoints=websecure"
      - "traefik.http.routers.zigbee2mqtt-rtr.rule=Host(`zigbee.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.zigbee2mqtt-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.zigbee2mqtt-rtr.service=zigbee2mqtt-svc"
      - "traefik.http.services.zigbee2mqtt-svc.loadbalancer.server.port=8080"

  ############################# Game Servers

  {# # Foundry VTT - A server for TTRPGS
  foundry:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: felddy/foundryvtt:release
    container_name: foundry
    volumes:
      - $CONTAINER_APPDATA_DIR/foundry:/data
    environment:
      FOUNDRY_UID: $PUID
      FOUNDRY_GID: $PGID
      TIMEZONE: $TZ
      FOUNDRY_HOSTNAME: "foundry.$DOMAIN_NAME"
      #FOUNDRY_PROXY_PORT: 443
      FOUNDRY_PROXY_SSL: "true"
      FOUNDRY_MINIFY_STATIC_FILES: "true"
    secrets:
      - source: foundry_config
        target: config.json
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.foundry-rtr.entrypoints=https"
      - "traefik.http.routers.foundry-rtr.rule=Host(`foundry.$DOMAIN_NAME`)"
      - "traefik.http.routers.foundry-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.foundry-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.foundry-rtr.service=foundry-svc"
      - "traefik.http.services.foundry-svc.loadbalancer.server.port=30000" #}

  
  
  {# # Crafty Controller - Minecraft server manager
  crafty-web:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: registry.gitlab.com/crafty-controller/crafty-4:latest
    container_name: crafty
    environment:
      <<: *primary-tz-puid-pgid
    ports:
      - "8123:8123" # DYNMAP
      - "19132:19132/udp" # BEDROCK
      - "25500-25600:25500-25600" # MC SERV PORT RANGE
    volumes:
      - "$USER_DIR/minecraft/backups:/crafty/backups"
      - "$USER_DIR/minecraft/logs:/crafty/logs"
      - "$USER_DIR/minecraft/servers:/crafty/servers"
      - "$USER_DIR/minecraft/config:/crafty/app/config"
      - "$USER_DIR/minecraft/import:/crafty/import"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.crafty-rtr.entrypoints=https"
      - "traefik.http.routers.crafty-rtr.rule=Host(`crafty.$DOMAIN_NAME`)"
      - "traefik.http.routers.crafty-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.crafty-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.crafty-rtr.service=crafty-svc"
      - "traefik.http.services.crafty-svc.loadbalancer.server.scheme=https"
      - "traefik.http.services.crafty-svc.loadbalancer.server.port=8443"
      - "traefik.http.services.crafty-svc.loadbalancer.serversTransport=isv-transport@file" #}


  ############################# MAINTENANCE

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    networks:
      - socket_proxy
    environment:
      TZ: $TZ
      DOCKER_HOST: "tcp://socket-proxy:2375"
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_REVIVE_STOPPED: "true"
      WATCHTOWER_LOG_LEVEL: "info"
      WATCHTOWER_POLL_INTERVAL: "3600" # Check for updates every hour
      WATCHTOWER_TIMEOUT: "60s"

  {# # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    networks:
      - socket_proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - $CONTAINER_APPDATA_DIR/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375 #}

  
  {# # Rustdesk Remote Desktop
  hbbs:
    container_name: hbbs
    ports:
      - 21115:21115
      - 21116:21116
      - 21116:21116/udp
      - 21118:21118
    image: rustdesk/rustdesk-server:latest
    command: hbbs -r rustdesk.cobaltcavern.com
    volumes:
      - ./data:/root
    networks:
      - rustdesk-net
      - proxies
    depends_on:
      - hbbr
    restart: unless-stopped
    labels:
      - "traefik.enable=true" 
      ## HTTP Routers
      - "traefik.http.routers.hbbs-rtr.entrypoints=https"
      - "traefik.http.routers.hbbs-rtr.rule=Host(`rustdesk.$DOMAIN_NAME`)"
      ## Middlewares
      - "traefik.http.routers.hbbs-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.hbbs-rtr.service=hbbs-svc"
      - "traefik.http.services.hbbs-svc.loadbalancer.server.port=21115"

  hbbr:
    container_name: hbbr
    ports:
      - 21117:21117
      - 21119:21119
    image: rustdesk/rustdesk-server:latest
    command: hbbr
    volumes:
      - ./data:/root
    networks:
      - rustdesk-net
    restart: unless-stopped #}
